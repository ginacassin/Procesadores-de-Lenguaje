package asint;
import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};

parser code {:
    private GestionErroresTiny errores;
    public void syntax_error(Symbol unidadLexica) {
        errores.errorSintactico((UnidadLexica)unidadLexica);
    }
:};

init with {:
    errores = new GestionErroresTiny();
    AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
    alex.fijaGestionErrores(errores);
:};

terminal SUMA, RESTA, MUL, DIV, PABRIR, PCERRAR, BABRIR, BCERRAR, TABRIR, TCERRAR,
         FINDEC, ASIG, MENOR, MAYOR, MENORIGUAL, MAYORIGUAL, IGUAL, NOIGUAL, AND,
         OR, NOT, TRUE, FALSE, MOD, PUNTERO, BITAND, ENTERO, REAL, BOOL, STRING,
         NULL, PROC, IF, ELSE, WHILE, STRUCT, NEW, DELETE, READ, WRITE, NL, TYPE,
         CALL, EVAL, PUNTO, COMA, PUNTOCOMA, IDEN, LITENT, LITREAL, LITCADENA;

non terminal programa, bloque, declaraciones, instrucciones, declaracionesAux, declaracion,
            declaracionVar, declaracionTipo, declaracionProc, paramsFormales, paramsFormalesAux,
            paramsFormalesLista, param, referencia, tipo0, tipo1, tipo2, listaCampos,
            campo, instruccionesAux, instruccion, paramsReales, paramsRealesAux,
            paramsRealesLista, expr, e0, e1, e2, e3, e4, e5, e6, op1, op4, op5, op6;

programa ::= bloque ;
bloque ::= BABRIR declaraciones instrucciones BCERRAR ;
declaraciones ::= declaracionesAux FINDEC ;
declaraciones ::= ;
declaracionesAux ::= declaracionesAux PUNTOCOMA declaracion ;
declaracionesAux ::= declaracion ;
declaracion ::= declaracionVar ;
declaracion ::= declaracionTipo ;
declaracion ::= declaracionProc ;
declaracionVar ::= tipo0 IDEN ;
declaracionTipo ::= TYPE tipo0 IDEN ;
declaracionProc ::= PROC IDEN paramsFormales bloque ;
paramsFormales ::= PABRIR paramsFormalesAux PCERRAR ;
paramsFormalesAux ::= paramsFormalesLista ;
paramsFormalesAux ::= ;
paramsFormalesLista ::= paramsFormalesLista COMA param ;
paramsFormalesLista ::= param ;
param ::= tipo0 referencia IDEN ;
referencia ::= BITAND ;
referencia ::= ;

tipo0 ::= tipo0 TABRIR LITENT TCERRAR ;
tipo0 ::= tipo1 ;
tipo1 ::= PUNTERO tipo1 ;
tipo1 ::= tipo2 ;
tipo2 ::= STRUCT BABRIR listaCampos BCERRAR ;
listaCampos ::= listaCampos COMA campo ;
listaCampos ::= campo ;
campo ::= tipo0 IDEN ;
tipo2 ::= ENTERO ;
tipo2 ::= REAL ;
tipo2 ::= BOOL ;
tipo2 ::= STRING ;
tipo2 ::= IDEN ;

instrucciones ::= instruccionesAux ;
instrucciones ::= ;
instruccionesAux ::= instruccionesAux PUNTOCOMA instruccion ;
instruccionesAux ::= instruccion ;
instruccion ::= EVAL expr ;
instruccion ::= IF expr bloque ;
instruccion ::= IF expr bloque ELSE bloque ;
instruccion ::= WHILE expr bloque ;
instruccion ::= READ expr ;
instruccion ::= WRITE expr ;
instruccion ::= NL ;
instruccion ::= NEW expr ;
instruccion ::= DELETE expr ;
instruccion ::= CALL IDEN paramsReales ;
instruccion ::= bloque ;
paramsReales ::= PABRIR paramsRealesAux PCERRAR ;
paramsRealesAux ::= paramsRealesLista ;
paramsRealesAux ::= ;
paramsRealesLista ::= paramsRealesLista COMA expr ;
paramsRealesLista ::= expr ;

expr ::= e0 ;
e0 ::= e1 ASIG e0 ;
e0 ::= e1 ;
e1 ::= e1 op1 e2 ;
e1 ::= e2 ;
e2 ::= e2 SUMA e3 ;
e2 ::= e3 RESTA e3 ;
e2 ::= e3 ;
e3 ::= e4 AND e3 ;
e3 ::= e4 OR e4 ;
e3 ::= e4 ;
e4 ::= e4 op4 e5 ;
e4 ::= e5 ;
e5 ::= op5 e5 ;
e5 ::= e6 ;
e6 ::= e6 op6 ;
e6 ::= PABRIR e0 PCERRAR ;
e6 ::= LITENT ;
e6 ::= LITREAL ;
e6 ::= TRUE ;
e6 ::= FALSE ;
e6 ::= LITCADENA ;
e6 ::= IDEN ;
e6 ::= NULL ;
op1 ::= MENOR ;
op1 ::= MAYOR ;
op1 ::= MENORIGUAL ;
op1 ::= MAYORIGUAL ;
op1 ::= IGUAL ;
op1 ::= NOIGUAL ;
op4 ::= MUL ;
op4 ::= DIV ;
op4 ::= MOD ;
op5 ::= RESTA ;
op5 ::= NOT ;
op6 ::= TABRIR expr TCERRAR ;
op6 ::= PUNTO IDEN ;
op6 ::= PUNTERO ;

