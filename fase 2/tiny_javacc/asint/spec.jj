options  {
  STATIC=false;
  DEBUG_PARSER=true;
  TOKEN_MANAGER_USES_PARSER=true;
}
PARSER_BEGIN(AnalizadorSintacticoTiny)
package asint;

public class AnalizadorSintacticoTiny {
    protected void newToken(Token t) {}
}
PARSER_END(AnalizadorSintacticoTiny)

// ======== REGLAS LEXICAS ========

  // Reglas auxiliares
  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digitoSinCero:["1"-"9"]>}
  TOKEN:{<#digito:<digitoSinCero>|"0">}
  TOKEN:{<#parteEntera:<digitoSinCero> (<digito>)* |"0">}
  TOKEN:{<#parteDecimal: (<digito>)* <digitoPositivo> | "0">}

  // Reglas de cadenas ignorables
    SKIP:{<["\t"," ","\r","\b","\n"]>}
    SKIP:{<"##"(~["\n",<EOF>])*>}

  // Reglas de token
  TOKEN: {<and:("a"|"A")("n"|"N")("d"|"D")>}
  TOKEN: {<or:("o"|"O")("r"|"R")>}
  TOKEN: {<not:("n"|"N")("o"|"O")("t"|"T")>}
  TOKEN: {<true:("t"|"T")("r"|"R")("u"|"U")("e"|"E")>}
  TOKEN: {<false:("f"|"F")("a"|"A")("l"|"L")("s"|"S")("e"|"E")>}
  TOKEN: {<int:("i"|"I")("n"|"N")("t"|"T")>}
  TOKEN: {<real:("r"|"R")("e"|"E")("a"|"A")("l"|"L")>}
  TOKEN: {<bool:("b"|"B")("o"|"O")("o"|"O")("l"|"L")>}
  TOKEN: {<string:("s"|"S")("t"|"T")("r"|"R")("i"|"I")("n"|"N")("g"|"G")>}
  TOKEN: {<null:("n"|"N")("u"|"U")("l"|"L")("l"|"L")>}  //esto habia que quitarlo?
  TOKEN: {<proc:("p"|"P")("r"|"R")("o"|"O")("c"|"C")>}
  TOKEN: {<if:("i"|"I")("f"|"F")>}
  TOKEN: {<else:("e"|"E")("l"|"L")("s"|"S")("e"|"E")>}
  TOKEN: {<while:("w"|"W")("h"|"H")("i"|"I")("l"|"L")("e"|"E")>}
  TOKEN: {<struct:("s"|"S")("t"|"T")("r"|"R")("u"|"U")("c"|"C")("t"|"T")>}
  TOKEN: {<new:("n"|"N")("e"|"E")("w"|"W")>}
  TOKEN: {<delete:("d"|"D")("e"|"E")("l"|"L")("e"|"E")("t"|"T")("e"|"E")>}
  TOKEN: {<read:("r"|"R")("e"|"E")("a"|"A")("d"|"D")>}
  TOKEN: {<write:("w"|"W")("r"|"R")("i"|"I")("t"|"T")("e"|"E")>}
  TOKEN: {<nl:("n"|"N")("l"|"L")>}
  TOKEN: {<type:("t"|"T")("y"|"Y")("p"|"P")("e"|"E")>}
  TOKEN: {<call:("c"|"C")("a"|"A")("l"|"L")("l"|"L")>}
  TOKEN:{<iden:(<letra>|"_")(<letra>|<digito>|"_")*>}
  TOKEN:{<literalEntero:(["+","-"])?<parteEntera>>}
  TOKEN:{<literalReal:<literalEntero>(("."<parteDecimal>)|(("e"|"E")(["+","-"])?<parteEntera>)|("."<parteDecimal>("e"|"E")(["+","-"])?<parteEntera>)) >}
  TOKEN:{<literalCadena:"\""(~["\""])*"\"">}       //revisar que esto lo acepta

// ======== REGLAS SINTACTICAS ========

  void programa()   : {} {bloque()}      //incluir eof ?
  void bloque()   : {} {declaraciones() instrucciones()}

  void declaraciones()   : {} {}
  void declaracionesAux()   : {} {}
  void declaracion()   : {} {}
  void declaracionVar()   : {} {}
  void declaracionTipo()   : {} {}
  void declaracionProc()   : {} {}
  void paramsFormales()   : {} {}
  void paramsFormalesAux()   : {} {}
  void paramsFormalesLista()   : {} {}
  void param()   : {} {}
  void referencia()   : {} {}

  void tipo0()   : {} {}
  void tipo1()   : {} {}
  void tipo2()   : {} {}
  void listaCampos()   : {} {}
  void campo()   : {} {}

  void intrucciones()   : {} {}
  void instruccionesAux()   : {} {}
  void instruccion()   : {} {}
  void paramsReales()   : {} {}
  void paramsRealesAux()   : {} {}
  void paramsRealesLista()   : {} {}

  void expr()   : {} {}
  void e0()   : {} {}
  void e1()   : {} {}
  void e2()   : {} {}
  void e3()   : {} {}
  void e4()   : {} {}
  void e5()   : {} {}
  void e6()   : {} {}
  void e7()   : {} {}
  void exprBase()   : {} {}
  void op1()   : {} {}
  void op2()   : {} {}
  void op3()   : {} {}
  void op4()   : {} {}
  void op5()   : {} {}
  void op6()   : {} {}





  void analiza()   : {} {programa() <EOF> }
  void programa()  : {} {expresion() declaraciones()}
  void expresion() : {} {<evalua> e0()}
  void declaraciones() : {} {<donde> lista_declaraciones() | {}}
  void lista_declaraciones() : {} {declaracion() rlista_decs()}
  void rlista_decs() : {} {"," declaracion() rlista_decs() | {}}
  void declaracion() : {} {<iden> "=" e0()}
  void e0() : {} {e1() re0()}
  void re0() : {} {op0() e1() re0() | {}}
  void e1() : {} {e2() re1()}
  void re1() : {} {op1() e2() re1() | {}}
  void e2() : {} {<iden> | <lit_ent> |  <lit_real> | "(" e0() ")"}
  void op0()  : {} {"+" | "-"}
  void op1()  : {} {"*" | "/"}












