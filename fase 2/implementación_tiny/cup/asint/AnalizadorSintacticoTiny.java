
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Mar 03 23:46:05 CET 2024
//----------------------------------------------------

package cup.asint;

import java_cup.runtime.*;
import cup.alex.AnalizadorLexicoTiny;
import cup.alex.UnidadLexica;
import cup.errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Mar 03 23:46:05 CET 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\006\005" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\010\004\000\002\011\005\000\002" +
    "\012\006\000\002\013\005\000\002\014\003\000\002\014" +
    "\002\000\002\015\005\000\002\015\003\000\002\016\005" +
    "\000\002\017\003\000\002\017\002\000\002\020\006\000" +
    "\002\020\003\000\002\021\004\000\002\021\003\000\002" +
    "\022\006\000\002\023\005\000\002\023\003\000\002\024" +
    "\004\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\005\003\000" +
    "\002\005\002\000\002\025\005\000\002\025\003\000\002" +
    "\026\004\000\002\026\005\000\002\026\007\000\002\026" +
    "\005\000\002\026\004\000\002\026\004\000\002\026\003" +
    "\000\002\026\004\000\002\026\004\000\002\026\005\000" +
    "\002\026\003\000\002\027\005\000\002\030\003\000\002" +
    "\030\002\000\002\031\005\000\002\031\003\000\002\032" +
    "\003\000\002\033\005\000\002\033\003\000\002\034\005" +
    "\000\002\034\003\000\002\035\005\000\002\035\005\000" +
    "\002\035\003\000\002\036\005\000\002\036\005\000\002" +
    "\036\003\000\002\037\005\000\002\037\003\000\002\040" +
    "\004\000\002\040\003\000\002\041\004\000\002\041\005" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\044\003\000\002\044\003\000\002\045\005\000\002" +
    "\045\004\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\004\012\005\001\002\000\004\002\220\001" +
    "\002\000\052\012\ufffd\013\ufffd\034\017\036\023\037\024" +
    "\040\021\041\015\043\020\044\ufffd\046\ufffd\047\010\050" +
    "\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\016\056\ufffd" +
    "\057\ufffd\063\012\001\002\000\004\002\001\001\002\000" +
    "\006\016\215\062\216\001\002\000\004\012\205\001\002" +
    "\000\006\016\ufff9\062\ufff9\001\002\000\010\014\uffe0\035" +
    "\uffe0\063\uffe0\001\002\000\006\016\ufff8\062\ufff8\001\002" +
    "\000\006\016\ufffb\062\ufffb\001\002\000\010\014\uffe1\035" +
    "\uffe1\063\uffe1\001\002\000\020\034\017\036\023\037\024" +
    "\040\021\041\015\047\010\063\012\001\002\000\020\034" +
    "\017\036\023\037\024\040\021\041\015\047\010\063\012" +
    "\001\002\000\004\063\164\001\002\000\010\014\uffe2\035" +
    "\uffe2\063\uffe2\001\002\000\006\016\ufffa\062\ufffa\001\002" +
    "\000\010\014\uffe4\035\uffe4\063\uffe4\001\002\000\010\014" +
    "\uffe3\035\uffe3\063\uffe3\001\002\000\030\012\005\013\uffde" +
    "\044\045\046\036\050\040\051\046\052\035\053\047\054" +
    "\044\056\051\057\050\001\002\000\010\014\uffe9\035\uffe9" +
    "\063\uffe9\001\002\000\010\014\uffeb\035\uffeb\063\uffeb\001" +
    "\002\000\006\014\032\063\031\001\002\000\006\016\ufff7" +
    "\062\ufff7\001\002\000\004\064\033\001\002\000\004\015" +
    "\034\001\002\000\010\014\uffec\035\uffec\063\uffec\001\002" +
    "\000\026\005\101\010\055\030\063\031\072\032\077\042" +
    "\100\063\067\064\075\065\056\066\061\001\002\000\026" +
    "\005\101\010\055\030\063\031\072\032\077\042\100\063" +
    "\067\064\075\065\056\066\061\001\002\000\006\013\uffdf" +
    "\062\157\001\002\000\026\005\101\010\055\030\063\031" +
    "\072\032\077\042\100\063\067\064\075\065\056\066\061" +
    "\001\002\000\006\013\uffd1\062\uffd1\001\002\000\004\013" +
    "\155\001\002\000\006\013\uffdc\062\uffdc\001\002\000\006" +
    "\013\uffd5\062\uffd5\001\002\000\026\005\101\010\055\030" +
    "\063\031\072\032\077\042\100\063\067\064\075\065\056" +
    "\066\061\001\002\000\026\005\101\010\055\030\063\031" +
    "\072\032\077\042\100\063\067\064\075\065\056\066\061" +
    "\001\002\000\026\005\101\010\055\030\063\031\072\032" +
    "\077\042\100\063\067\064\075\065\056\066\061\001\002" +
    "\000\026\005\101\010\055\030\063\031\072\032\077\042" +
    "\100\063\067\064\075\065\056\066\061\001\002\000\004" +
    "\063\052\001\002\000\004\010\053\001\002\000\030\005" +
    "\101\010\055\011\uffce\030\063\031\072\032\077\042\100" +
    "\063\067\064\075\065\056\066\061\001\002\000\006\013" +
    "\uffd2\062\uffd2\001\002\000\026\005\101\010\055\030\063" +
    "\031\072\032\077\042\100\063\067\064\075\065\056\066" +
    "\061\001\002\000\060\004\uffb9\005\uffb9\006\uffb9\007\uffb9" +
    "\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\033\uffb9\034\uffb9\060\uffb9\061\uffb9\062\uffb9\001" +
    "\002\000\006\011\uffcc\061\uffcc\001\002\000\006\011\uffcf" +
    "\061\142\001\002\000\060\004\uffb6\005\uffb6\006\uffb6\007" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\033\uffb6\034\uffb6\060\uffb6\061\uffb6\062\uffb6" +
    "\001\002\000\060\004\uffbd\005\uffbd\006\uffbd\007\uffbd\011" +
    "\uffbd\012\uffbd\013\uffbd\014\136\015\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\033\uffbd\034\135\060\134\061\uffbd\062\uffbd\001\002" +
    "\000\026\005\uffa9\010\uffa9\030\uffa9\031\uffa9\032\uffa9\042" +
    "\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\001\002\000\052" +
    "\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf\012\uffbf\013" +
    "\uffbf\015\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\033\uffbf\061\uffbf\062" +
    "\uffbf\001\002\000\052\004\uffc1\005\uffc1\006\125\007\126" +
    "\011\uffc1\012\uffc1\013\uffc1\015\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\124\027\127" +
    "\033\122\061\uffc1\062\uffc1\001\002\000\040\004\uffc4\005" +
    "\120\011\uffc4\012\uffc4\013\uffc4\015\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\061\uffc4\062" +
    "\uffc4\001\002\000\060\004\uffb5\005\uffb5\006\uffb5\007\uffb5" +
    "\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\033\uffb5\034\uffb5\060\uffb5\061\uffb5\062\uffb5\001" +
    "\002\000\036\004\116\011\uffc7\012\uffc7\013\uffc7\015\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\061\uffc7\062\uffc7\001\002\000\034\011\uffc9\012\uffc9" +
    "\013\uffc9\015\uffc9\017\113\020\111\021\112\022\105\023" +
    "\104\024\106\025\107\061\uffc9\062\uffc9\001\002\000\060" +
    "\004\uffb8\005\uffb8\006\uffb8\007\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\033\uffb8\034" +
    "\uffb8\060\uffb8\061\uffb8\062\uffb8\001\002\000\016\011\uffcb" +
    "\012\uffcb\013\uffcb\015\uffcb\061\uffcb\062\uffcb\001\002\000" +
    "\026\005\101\010\055\030\063\031\072\032\077\042\100" +
    "\063\067\064\075\065\056\066\061\001\002\000\060\004" +
    "\uffba\005\uffba\006\uffba\007\uffba\011\uffba\012\uffba\013\uffba" +
    "\014\uffba\015\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\uffba\033\uffba\034\uffba" +
    "\060\uffba\061\uffba\062\uffba\001\002\000\004\011\102\001" +
    "\002\000\060\004\uffb7\005\uffb7\006\uffb7\007\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\033\uffb7\034\uffb7\060\uffb7\061\uffb7\062\uffb7\001\002\000" +
    "\060\004\uffb4\005\uffb4\006\uffb4\007\uffb4\011\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\033\uffb4" +
    "\034\uffb4\060\uffb4\061\uffb4\062\uffb4\001\002\000\026\005" +
    "\uffaa\010\uffaa\030\uffaa\031\uffaa\032\uffaa\042\uffaa\063\uffaa" +
    "\064\uffaa\065\uffaa\066\uffaa\001\002\000\006\013\uffd0\062" +
    "\uffd0\001\002\000\052\004\uffbe\005\uffbe\006\uffbe\007\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\015\uffbe\017\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\033\uffbe\061\uffbe\062\uffbe\001\002\000\026\005\uffb0\010" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\042\uffb0\063\uffb0\064\uffb0" +
    "\065\uffb0\066\uffb0\001\002\000\026\005\uffb1\010\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\042\uffb1\063\uffb1\064\uffb1\065\uffb1" +
    "\066\uffb1\001\002\000\026\005\uffaf\010\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\042\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf" +
    "\001\002\000\026\005\uffae\010\uffae\030\uffae\031\uffae\032" +
    "\uffae\042\uffae\063\uffae\064\uffae\065\uffae\066\uffae\001\002" +
    "\000\026\005\101\010\055\030\063\031\072\032\077\042" +
    "\100\063\067\064\075\065\056\066\061\001\002\000\026" +
    "\005\uffb3\010\uffb3\030\uffb3\031\uffb3\032\uffb3\042\uffb3\063" +
    "\uffb3\064\uffb3\065\uffb3\066\uffb3\001\002\000\026\005\uffb2" +
    "\010\uffb2\030\uffb2\031\uffb2\032\uffb2\042\uffb2\063\uffb2\064" +
    "\uffb2\065\uffb2\066\uffb2\001\002\000\026\005\101\010\055" +
    "\030\063\031\072\032\077\042\100\063\067\064\075\065" +
    "\056\066\061\001\002\000\016\011\uffca\012\uffca\013\uffca" +
    "\015\uffca\061\uffca\062\uffca\001\002\000\036\004\116\011" +
    "\uffc8\012\uffc8\013\uffc8\015\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\025\uffc8\061\uffc8\062\uffc8\001" +
    "\002\000\026\005\101\010\055\030\063\031\072\032\077" +
    "\042\100\063\067\064\075\065\056\066\061\001\002\000" +
    "\036\004\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\061" +
    "\uffc6\062\uffc6\001\002\000\026\005\101\010\055\030\063" +
    "\031\072\032\077\042\100\063\067\064\075\065\056\066" +
    "\061\001\002\000\036\004\uffc5\011\uffc5\012\uffc5\013\uffc5" +
    "\015\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\061\uffc5\062\uffc5\001\002\000\026\005\uffab" +
    "\010\uffab\030\uffab\031\uffab\032\uffab\042\uffab\063\uffab\064" +
    "\uffab\065\uffab\066\uffab\001\002\000\026\005\101\010\055" +
    "\030\063\031\072\032\077\042\100\063\067\064\075\065" +
    "\056\066\061\001\002\000\026\005\101\010\055\030\063" +
    "\031\072\032\077\042\100\063\067\064\075\065\056\066" +
    "\061\001\002\000\026\005\uffad\010\uffad\030\uffad\031\uffad" +
    "\032\uffad\042\uffad\063\uffad\064\uffad\065\uffad\066\uffad\001" +
    "\002\000\026\005\uffac\010\uffac\030\uffac\031\uffac\032\uffac" +
    "\042\uffac\063\uffac\064\uffac\065\uffac\066\uffac\001\002\000" +
    "\026\005\101\010\055\030\063\031\072\032\077\042\100" +
    "\063\067\064\075\065\056\066\061\001\002\000\046\004" +
    "\uffc2\005\uffc2\006\125\007\126\011\uffc2\012\uffc2\013\uffc2" +
    "\015\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\033\122\061\uffc2\062\uffc2\001\002\000\040" +
    "\004\uffc3\005\uffc3\011\uffc3\012\uffc3\013\uffc3\015\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\061\uffc3\062\uffc3\001\002\000\052\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\011\uffc0\012\uffc0\013\uffc0\015\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\033\uffc0\061\uffc0\062\uffc0\001\002\000\060" +
    "\004\uffbc\005\uffbc\006\uffbc\007\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\033\uffbc\034" +
    "\uffbc\060\uffbc\061\uffbc\062\uffbc\001\002\000\004\063\141" +
    "\001\002\000\060\004\uffa6\005\uffa6\006\uffa6\007\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\017\uffa6\020\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027" +
    "\uffa6\033\uffa6\034\uffa6\060\uffa6\061\uffa6\062\uffa6\001\002" +
    "\000\026\005\101\010\055\030\063\031\072\032\077\042" +
    "\100\063\067\064\075\065\056\066\061\001\002\000\004" +
    "\015\140\001\002\000\060\004\uffa8\005\uffa8\006\uffa8\007" +
    "\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\017\uffa8" +
    "\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\033\uffa8\034\uffa8\060\uffa8\061\uffa8\062\uffa8" +
    "\001\002\000\060\004\uffa7\005\uffa7\006\uffa7\007\uffa7\011" +
    "\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\017\uffa7\020\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027" +
    "\uffa7\033\uffa7\034\uffa7\060\uffa7\061\uffa7\062\uffa7\001\002" +
    "\000\026\005\101\010\055\030\063\031\072\032\077\042" +
    "\100\063\067\064\075\065\056\066\061\001\002\000\006" +
    "\011\uffcd\061\uffcd\001\002\000\004\011\145\001\002\000" +
    "\060\004\uffbb\005\uffbb\006\uffbb\007\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\014\uffbb\015\uffbb\017\uffbb\020\uffbb\021\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\033\uffbb" +
    "\034\uffbb\060\uffbb\061\uffbb\062\uffbb\001\002\000\006\013" +
    "\uffdb\062\uffdb\001\002\000\006\013\uffd6\062\uffd6\001\002" +
    "\000\006\013\uffd3\062\uffd3\001\002\000\004\012\005\001" +
    "\002\000\010\013\uffda\045\153\062\uffda\001\002\000\004" +
    "\012\005\001\002\000\006\013\uffd9\062\uffd9\001\002\000" +
    "\014\002\uffff\013\uffff\016\uffff\045\uffff\062\uffff\001\002" +
    "\000\006\013\uffd4\062\uffd4\001\002\000\026\012\005\044" +
    "\045\046\036\050\040\051\046\052\035\053\047\054\044" +
    "\056\051\057\050\001\002\000\006\013\uffdd\062\uffdd\001" +
    "\002\000\004\012\005\001\002\000\006\013\uffd8\062\uffd8" +
    "\001\002\000\006\013\uffd7\062\uffd7\001\002\000\004\010" +
    "\166\001\002\000\004\012\005\001\002\000\022\011\ufff2" +
    "\034\017\036\023\037\024\040\021\041\015\047\010\063" +
    "\012\001\002\000\010\014\032\035\176\063\uffed\001\002" +
    "\000\004\011\175\001\002\000\006\011\ufff0\061\ufff0\001" +
    "\002\000\006\011\ufff3\061\173\001\002\000\020\034\017" +
    "\036\023\037\024\040\021\041\015\047\010\063\012\001" +
    "\002\000\006\011\ufff1\061\ufff1\001\002\000\004\012\ufff4" +
    "\001\002\000\004\063\uffee\001\002\000\004\063\200\001" +
    "\002\000\006\011\uffef\061\uffef\001\002\000\006\016\ufff5" +
    "\062\ufff5\001\002\000\010\014\uffea\035\uffea\063\uffea\001" +
    "\002\000\006\014\032\063\204\001\002\000\006\016\ufff6" +
    "\062\ufff6\001\002\000\020\034\017\036\023\037\024\040" +
    "\021\041\015\047\010\063\012\001\002\000\006\014\032" +
    "\063\214\001\002\000\006\013\212\061\211\001\002\000" +
    "\006\013\uffe6\061\uffe6\001\002\000\020\034\017\036\023" +
    "\037\024\040\021\041\015\047\010\063\012\001\002\000" +
    "\010\014\uffe8\035\uffe8\063\uffe8\001\002\000\006\013\uffe7" +
    "\061\uffe7\001\002\000\006\013\uffe5\061\uffe5\001\002\000" +
    "\030\012\ufffe\013\ufffe\044\ufffe\046\ufffe\050\ufffe\051\ufffe" +
    "\052\ufffe\053\ufffe\054\ufffe\056\ufffe\057\ufffe\001\002\000" +
    "\024\034\017\036\023\037\024\040\021\041\015\043\020" +
    "\047\010\055\016\063\012\001\002\000\006\016\ufffc\062" +
    "\ufffc\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\024\004\024\006\006\007\013\010\021\011\010" +
    "\012\012\020\027\021\026\022\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\202\021\026\022\025\001\001" +
    "\000\006\021\201\022\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\040\005\041\025\036\026\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\032\162\033\072\034\070\035\067" +
    "\036\065\037\064\040\063\041\061\044\073\001\001\000" +
    "\024\032\160\033\072\034\070\035\067\036\065\037\064" +
    "\040\063\041\061\044\073\001\001\000\002\001\001\000" +
    "\024\032\155\033\072\034\070\035\067\036\065\037\064" +
    "\040\063\041\061\044\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\032\150\033\072\034\070\035\067\036\065\037\064\040" +
    "\063\041\061\044\073\001\001\000\024\032\147\033\072" +
    "\034\070\035\067\036\065\037\064\040\063\041\061\044" +
    "\073\001\001\000\024\032\146\033\072\034\070\035\067" +
    "\036\065\037\064\040\063\041\061\044\073\001\001\000" +
    "\024\032\145\033\072\034\070\035\067\036\065\037\064" +
    "\040\063\041\061\044\073\001\001\000\002\001\001\000" +
    "\004\027\053\001\001\000\030\030\075\031\057\032\056" +
    "\033\072\034\070\035\067\036\065\037\064\040\063\041" +
    "\061\044\073\001\001\000\002\001\001\000\022\033\143" +
    "\034\070\035\067\036\065\037\064\040\063\041\061\044" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\040\102\041\061\044\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\035\114\036\065\037\064\040\063\041" +
    "\061\044\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\033\113\034\070\035\067\036\065\037\064\040" +
    "\063\041\061\044\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\036\116\037\064\040\063\041\061\044" +
    "\073\001\001\000\002\001\001\000\014\036\120\037\064" +
    "\040\063\041\061\044\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\040\131\041\061\044\073\001\001" +
    "\000\014\036\130\037\064\040\063\041\061\044\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\037\127" +
    "\040\063\041\061\044\073\001\001\000\004\043\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\032\136\033" +
    "\072\034\070\035\067\036\065\037\064\040\063\041\061" +
    "\044\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\032\142\033\072\034\070\035\067" +
    "\036\065\037\064\040\063\041\061\044\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\151\001\001\000\002\001\001\000\004\003\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\040\026\157\001\001\000\002\001\001\000\004" +
    "\003\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\164\001\001\000\004\003\200\001\001\000\016" +
    "\014\167\015\171\016\170\020\166\021\026\022\025\001" +
    "\001\000\004\017\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\173\020\166\021" +
    "\026\022\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\020\205\021\026\022\025\023\206\024" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\205\021\026\022\025\024\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\216\010\021\011\010\012" +
    "\012\020\027\021\026\022\025\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    errores = new GestionErroresTiny();
    AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
    alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


    private GestionErroresTiny errores;
    public void syntax_error(Symbol unidadLexica) {errores.errorSintactico((UnidadLexica)unidadLexica);}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= BABRIR declaraciones instrucciones BCERRAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("bloque",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= declaracionesAux FINDEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracionesAux ::= declaracionesAux PUNTOCOMA declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracionesAux",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracionesAux ::= declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracionesAux",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= declaracionVar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= declaracionTipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= declaracionProc 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionVar ::= tipo0 IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracionVar",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracionTipo ::= TYPE tipo0 IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracionTipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracionProc ::= PROC IDEN paramsFormales bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracionProc",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramsFormales ::= PABRIR paramsFormalesAux PCERRAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramsFormales",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramsFormalesAux ::= paramsFormalesLista 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramsFormalesAux",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramsFormalesAux ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramsFormalesAux",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // paramsFormalesLista ::= paramsFormalesLista COMA param 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramsFormalesLista",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // paramsFormalesLista ::= param 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramsFormalesLista",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // param ::= tipo0 referencia IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("param",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // referencia ::= BITAND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("referencia",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // referencia ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("referencia",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo0 ::= tipo0 TABRIR LITENT TCERRAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo0 ::= tipo1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo1 ::= PUNTERO tipo1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo1 ::= tipo2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo2 ::= STRUCT BABRIR listaCampos BCERRAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listaCampos ::= listaCampos COMA campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("listaCampos",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listaCampos ::= campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("listaCampos",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // campo ::= tipo0 IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campo",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo2 ::= ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo2 ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo2 ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo2 ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo2 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instrucciones ::= instruccionesAux 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instrucciones ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccionesAux ::= instruccionesAux PUNTOCOMA instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccionesAux",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccionesAux ::= instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccionesAux",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= EVAL expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= IF expr bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= IF expr bloque ELSE bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= WHILE expr bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= READ expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= WRITE expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= NEW expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= DELETE expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion ::= CALL IDEN paramsReales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccion ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // paramsReales ::= PABRIR paramsRealesAux PCERRAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramsReales",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // paramsRealesAux ::= paramsRealesLista 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramsRealesAux",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // paramsRealesAux ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramsRealesAux",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // paramsRealesLista ::= paramsRealesLista COMA expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramsRealesLista",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // paramsRealesLista ::= expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramsRealesLista",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= e0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expr",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // e0 ::= e1 ASIG e0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // e0 ::= e1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // e1 ::= e1 op1 e2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // e1 ::= e2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // e2 ::= e2 SUMA e3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // e2 ::= e3 RESTA e3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // e2 ::= e3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // e3 ::= e4 AND e3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // e3 ::= e4 OR e4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // e3 ::= e4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // e4 ::= e4 op4 e5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // e4 ::= e5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // e5 ::= op5 e5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // e5 ::= e6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // e6 ::= e6 op6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // e6 ::= PABRIR e0 PCERRAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // e6 ::= LITENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // e6 ::= LITREAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // e6 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // e6 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // e6 ::= LITCADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // e6 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // e6 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("e6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // op1 ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op1",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // op1 ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op1",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // op1 ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op1",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // op1 ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op1",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // op1 ::= IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op1",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // op1 ::= NOIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op1",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // op4 ::= MUL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op4",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // op4 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op4",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // op4 ::= MOD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op4",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // op5 ::= RESTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op5",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // op5 ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op5",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // op6 ::= TABRIR expr TCERRAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op6",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // op6 ::= PUNTO IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op6",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // op6 ::= PUNTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op6",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

