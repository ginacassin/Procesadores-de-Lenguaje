/* ConstructorASTsTiny.java */
/* Generated By:JavaCC: Do not edit this line. ConstructorASTsTiny.java */
package c_ast_descendente;
import asint.ClaseSemanticaTiny;
import asint.SintaxisAbstractaTiny.Exp;
import asint.SintaxisAbstractaTiny.ParamsR;
import asint.SintaxisAbstractaTiny.ParamsRL;
import asint.SintaxisAbstractaTiny.Insts;
import asint.SintaxisAbstractaTiny.InstsAux;
import asint.SintaxisAbstractaTiny.Inst;
import asint.SintaxisAbstractaTiny.Campo;
import asint.SintaxisAbstractaTiny.LCampos;
import asint.SintaxisAbstractaTiny.T;
import asint.SintaxisAbstractaTiny.ParamsF;
import asint.SintaxisAbstractaTiny.Param;
import asint.SintaxisAbstractaTiny.ParamsFL;
import asint.SintaxisAbstractaTiny.Dec;
import asint.SintaxisAbstractaTiny.Decs;
import asint.SintaxisAbstractaTiny.DecsAux;
import asint.SintaxisAbstractaTiny.Bloq;
import asint.SintaxisAbstractaTiny.Prog;

public class ConstructorASTsTiny implements ConstructorASTsTinyConstants {
    protected void newToken(Token t) {}
    private ClaseSemanticaTiny sem = new ClaseSemanticaTiny();

// ======== REGLAS SINTACTICAS ========
  final public 
    Prog analiza() throws ParseException {
    trace_call("analiza");
    try {
Prog prog;
      prog = programa();
      jj_consume_token(0);
{if ("" != null) return prog;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("analiza");
    }
}

  final public Prog programa() throws ParseException {
    trace_call("programa");
    try {
Bloq bloq;
      bloq = bloque();
{if ("" != null) return sem.prog(bloq);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("programa");
    }
}

  final public Bloq bloque() throws ParseException {
    trace_call("bloque");
    try {
Decs decs; Insts insts;
      jj_consume_token(48);
      decs = declaraciones();
      insts = instrucciones();
      jj_consume_token(49);
{if ("" != null) return sem.bloq(decs, insts);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("bloque");
    }
}

  final public Decs declaraciones() throws ParseException {
    trace_call("declaraciones");
    try {
DecsAux decsAux;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case real:
      case bool:
      case string:
      case proc:
      case struct:
      case type:
      case iden:
      case indir:{
        decsAux = declaracionesAux();
        jj_consume_token(50);
{if ("" != null) return sem.si_decs(decsAux);}
        break;
        }
      default:
        jj_la1[0] = jj_gen;
{if ("" != null) return sem.no_decs();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaraciones");
    }
}

  final public DecsAux declaracionesAux() throws ParseException {
    trace_call("declaracionesAux");
    try {
DecsAux decsAux; Dec dec;
      dec = declaracion();
      decsAux = recDeclaracion(sem.una_dec(dec));
{if ("" != null) return decsAux;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaracionesAux");
    }
}

  final public DecsAux recDeclaracion(DecsAux decsAuxh) throws ParseException {
    trace_call("recDeclaracion");
    try {
DecsAux decsAux; Dec dec;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 51:{
        jj_consume_token(51);
        dec = declaracion();
        decsAux = recDeclaracion(sem.muchas_decs(decsAuxh, dec));
{if ("" != null) return decsAux;}
        break;
        }
      default:
        jj_la1[1] = jj_gen;
{if ("" != null) return decsAuxh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recDeclaracion");
    }
}

  final public Dec declaracion() throws ParseException {
    trace_call("declaracion");
    try {
T tipo; Token id; ParamsF paramsF; Bloq bloq;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case real:
      case bool:
      case string:
      case struct:
      case iden:
      case indir:{
        tipo = tipo0();
        id = jj_consume_token(iden);
{if ("" != null) return (Dec)sem.dec_var(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
        }
      case type:{
        jj_consume_token(type);
        tipo = tipo0();
        id = jj_consume_token(iden);
{if ("" != null) return (Dec)sem.dec_tipo(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
        }
      case proc:{
        jj_consume_token(proc);
        id = jj_consume_token(iden);
        paramsF = paramsFormales();
        bloq = bloque();
{if ("" != null) return (Dec)sem.dec_proc(id.image, paramsF, bloq).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaracion");
    }
}

  final public ParamsF paramsFormales() throws ParseException {
    trace_call("paramsFormales");
    try {
ParamsF paramsF;
      jj_consume_token(52);
      paramsF = paramsFormalesAux();
      jj_consume_token(53);
{if ("" != null) return paramsF;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("paramsFormales");
    }
}

  final public ParamsF paramsFormalesAux() throws ParseException {
    trace_call("paramsFormalesAux");
    try {
ParamsFL paramsFL;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case real:
      case bool:
      case string:
      case struct:
      case iden:
      case indir:{
        paramsFL = paramsFormalesLista();
{if ("" != null) return sem.si_paramF(paramsFL);}
        break;
        }
      default:
        jj_la1[3] = jj_gen;
{if ("" != null) return sem.no_paramF();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("paramsFormalesAux");
    }
}

  final public ParamsFL paramsFormalesLista() throws ParseException {
    trace_call("paramsFormalesLista");
    try {
ParamsFL paramsFL; Param param;
      param = param();
      paramsFL = recParamFormal(sem.un_paramF(param));
{if ("" != null) return paramsFL;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("paramsFormalesLista");
    }
}

  final public ParamsFL recParamFormal(ParamsFL paramsFLh) throws ParseException {
    trace_call("recParamFormal");
    try {
ParamsFL paramsFL; Param param;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 54:{
        jj_consume_token(54);
        param = param();
        paramsFL = recParamFormal(sem.muchos_paramsF(paramsFLh, param));
{if ("" != null) return paramsFL;}
        break;
        }
      default:
        jj_la1[4] = jj_gen;
{if ("" != null) return paramsFLh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recParamFormal");
    }
}

  final public Param param() throws ParseException {
    trace_call("param");
    try {
T tipo0; Param param;
      tipo0 = tipo0();
      param = facParam(tipo0);
{if ("" != null) return param;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("param");
    }
}

  final public Param facParam(T tipoh) throws ParseException {
    trace_call("facParam");
    try {
Token id;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 55:{
        jj_consume_token(55);
        id = jj_consume_token(iden);
{if ("" != null) return (Param)sem.param_ref(tipoh, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
        }
      case iden:{
        id = jj_consume_token(iden);
{if ("" != null) return (Param)sem.param(tipoh, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("facParam");
    }
}

  final public T tipo0() throws ParseException {
    trace_call("tipo0");
    try {
T tipo; T recArray;
      tipo = tipo1();
      recArray = recArray(tipo);
{if ("" != null) return recArray;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo0");
    }
}

  final public T recArray(T tipoh) throws ParseException {
    trace_call("recArray");
    try {
Token litEntero; T recArray;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case abrirCorchete:{
        jj_consume_token(abrirCorchete);
        litEntero = jj_consume_token(literalEntero);
        jj_consume_token(56);
        recArray = recArray((T)sem.tipo_array(tipoh, litEntero.image).ponFila(litEntero.beginLine).ponCol(litEntero.beginColumn));
{if ("" != null) return recArray;}
        break;
        }
      default:
        jj_la1[6] = jj_gen;
{if ("" != null) return tipoh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recArray");
    }
}

  final public T tipo1() throws ParseException {
    trace_call("tipo1");
    try {
T tipo;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case indir:{
        jj_consume_token(indir);
        tipo = tipo1();
{if ("" != null) return sem.tipo_punt(tipo);}
        break;
        }
      case INT:
      case real:
      case bool:
      case string:
      case struct:
      case iden:{
        tipo = tipo2();
{if ("" != null) return tipo;}
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo1");
    }
}

  final public T tipo2() throws ParseException {
    trace_call("tipo2");
    try {
LCampos lCampos; Token id;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case struct:{
        jj_consume_token(struct);
        jj_consume_token(48);
        lCampos = listaCampos();
        jj_consume_token(49);
{if ("" != null) return sem.tipo_struct(lCampos);}
        break;
        }
      case INT:{
        jj_consume_token(INT);
{if ("" != null) return sem.ent();}
        break;
        }
      case real:{
        jj_consume_token(real);
{if ("" != null) return sem.real();}
        break;
        }
      case bool:{
        jj_consume_token(bool);
{if ("" != null) return sem.bool();}
        break;
        }
      case string:{
        jj_consume_token(string);
{if ("" != null) return sem.tipo_string();}
        break;
        }
      case iden:{
        id = jj_consume_token(iden);
{if ("" != null) return (T)sem.tipo_iden(id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo2");
    }
}

  final public LCampos listaCampos() throws ParseException {
    trace_call("listaCampos");
    try {
LCampos lCampos; Campo campo;
      campo = campo();
      lCampos = recCampo(sem.un_campo(campo));
{if ("" != null) return lCampos;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("listaCampos");
    }
}

  final public LCampos recCampo(LCampos camposh) throws ParseException {
    trace_call("recCampo");
    try {
LCampos lCampos; Campo campo;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 54:{
        jj_consume_token(54);
        campo = campo();
        lCampos = recCampo(sem.muchos_campos(camposh, campo));
{if ("" != null) return lCampos;}
        break;
        }
      default:
        jj_la1[9] = jj_gen;
{if ("" != null) return camposh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recCampo");
    }
}

  final public Campo campo() throws ParseException {
    trace_call("campo");
    try {
T tipo; Token id;
      tipo = tipo0();
      id = jj_consume_token(iden);
{if ("" != null) return (Campo)sem.campo(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("campo");
    }
}

  final public Insts instrucciones() throws ParseException {
    trace_call("instrucciones");
    try {
InstsAux instsAux;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case WHILE:
      case NEW:
      case delete:
      case read:
      case write:
      case nl:
      case call:
      case 48:
      case 57:{
        instsAux = instruccionesAux();
{if ("" != null) return sem.si_instr(instsAux);}
        break;
        }
      default:
        jj_la1[10] = jj_gen;
{if ("" != null) return sem.no_instr();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instrucciones");
    }
}

  final public InstsAux instruccionesAux() throws ParseException {
    trace_call("instruccionesAux");
    try {
InstsAux instsAux; Inst inst;
      inst = instruccion();
      instsAux = recInstruccion(sem.una_instr(inst));
{if ("" != null) return instsAux;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccionesAux");
    }
}

  final public InstsAux recInstruccion(InstsAux instsAuxh) throws ParseException {
    trace_call("recInstruccion");
    try {
InstsAux instsAux; Inst inst;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 51:{
        jj_consume_token(51);
        inst = instruccion();
        instsAux = recInstruccion(sem.muchas_instr(instsAuxh, inst));
{if ("" != null) return instsAux;}
        break;
        }
      default:
        jj_la1[11] = jj_gen;
{if ("" != null) return instsAuxh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recInstruccion");
    }
}

  final public Inst instruccion() throws ParseException {
    trace_call("instruccion");
    try {
Exp exp; Bloq bloq1; Token id; ParamsR paramsR; Inst inst;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 57:{
        jj_consume_token(57);
        exp = expr();
{if ("" != null) return sem.instr_expr(exp);}
        break;
        }
      case IF:{
        jj_consume_token(IF);
        exp = expr();
        bloq1 = bloque();
        inst = factIf(exp, bloq1);
{if ("" != null) return inst;}
        break;
        }
      case WHILE:{
        jj_consume_token(WHILE);
        exp = expr();
        bloq1 = bloque();
{if ("" != null) return sem.instr_while(exp, bloq1);}
        break;
        }
      case read:{
        jj_consume_token(read);
        exp = expr();
{if ("" != null) return sem.instr_read(exp);}
        break;
        }
      case write:{
        jj_consume_token(write);
        exp = expr();
{if ("" != null) return sem.instr_write(exp);}
        break;
        }
      case nl:{
        jj_consume_token(nl);
{if ("" != null) return sem.instr_nl();}
        break;
        }
      case NEW:{
        jj_consume_token(NEW);
        exp = expr();
{if ("" != null) return sem.instr_new(exp);}
        break;
        }
      case delete:{
        jj_consume_token(delete);
        exp = expr();
{if ("" != null) return sem.instr_del(exp);}
        break;
        }
      case call:{
        jj_consume_token(call);
        id = jj_consume_token(iden);
        paramsR = paramsReales();
{if ("" != null) return (Inst)sem.instr_call(id.image, paramsR).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
        }
      case 48:{
        bloq1 = bloque();
{if ("" != null) return sem.instr_bloque(bloq1);}
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion");
    }
}

  final public Inst factIf(Exp exph, Bloq bloqh) throws ParseException {
    trace_call("factIf");
    try {
Bloq bloq;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        bloq = bloque();
{if ("" != null) return sem.instr_if_else(exph, bloqh, bloq);}
        break;
        }
      default:
        jj_la1[13] = jj_gen;
{if ("" != null) return sem.instr_if(exph, bloqh);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("factIf");
    }
}

  final public ParamsR paramsReales() throws ParseException {
    trace_call("paramsReales");
    try {
ParamsR paramsRealesAux;
      jj_consume_token(52);
      paramsRealesAux = paramsRealesAux();
      jj_consume_token(53);
{if ("" != null) return paramsRealesAux;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("paramsReales");
    }
}

  final public ParamsR paramsRealesAux() throws ParseException {
    trace_call("paramsRealesAux");
    try {
ParamsRL paramsRL;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case not:
      case TRUE:
      case FALSE:
      case NULL:
      case iden:
      case literalEntero:
      case literalReal:
      case literalCadena:
      case resta:
      case 52:{
        paramsRL = paramsRealesLista();
{if ("" != null) return sem.si_paramsR(paramsRL);}
        break;
        }
      default:
        jj_la1[14] = jj_gen;
{if ("" != null) return sem.no_paramsR();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("paramsRealesAux");
    }
}

  final public ParamsRL paramsRealesLista() throws ParseException {
    trace_call("paramsRealesLista");
    try {
ParamsRL paramsRL; Exp exp;
      exp = expr();
      paramsRL = recParamReal(sem.un_paramsR(exp));
{if ("" != null) return paramsRL;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("paramsRealesLista");
    }
}

  final public ParamsRL recParamReal(ParamsRL paramsRLh) throws ParseException {
    trace_call("recParamReal");
    try {
ParamsRL paramsRL; Exp exp;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 54:{
        jj_consume_token(54);
        exp = expr();
        paramsRL = recParamReal(sem.muchos_paramsR(paramsRLh, exp));
{if ("" != null) return paramsRL;}
        break;
        }
      default:
        jj_la1[15] = jj_gen;
{if ("" != null) return paramsRLh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recParamReal");
    }
}

  final public Exp expr() throws ParseException {
    trace_call("expr");
    try {
Exp e0;
      e0 = e0();
{if ("" != null) return e0;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr");
    }
}

  final public Exp e0() throws ParseException {
    trace_call("e0");
    try {
Exp e1; Exp e0;
      e1 = e1();
      e0 = facE1(e1);
{if ("" != null) return e0;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("e0");
    }
}

  final public Exp facE1(Exp e1h) throws ParseException {
    trace_call("facE1");
    try {
Exp e0; Token asign;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case asignar:{
        asign = jj_consume_token(asignar);
        e0 = e0();
{if ("" != null) return (Exp) sem.asig(e1h, e0).ponFila(asign.beginLine).ponCol(asign.beginColumn);}
        break;
        }
      default:
        jj_la1[16] = jj_gen;
{if ("" != null) return e1h;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("facE1");
    }
}

  final public Exp e1() throws ParseException {
    trace_call("e1");
    try {
Exp e2,e1;
      e2 = e2();
      e1 = recOp1(e2);
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("e1");
    }
}

  final public Exp recOp1(Exp e2h) throws ParseException {
    trace_call("recOp1");
    try {
Token op1; Exp e2,e1;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case menor:
      case mayor:
      case menorIgual:
      case mayorIgual:
      case igual:
      case noIgual:{
        op1 = op1();
        e2 = e2();
        e1 = recOp1((Exp) sem.mkop1Token(op1, e2h, e2).ponFila(op1.beginLine).ponCol(op1.beginColumn));
{if ("" != null) return e1;}
        break;
        }
      default:
        jj_la1[17] = jj_gen;
{if ("" != null) return e2h;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recOp1");
    }
}

  final public Exp e2() throws ParseException {
    trace_call("e2");
    try {
Exp e31, e32, e33;
      e31 = e3();
      e32 = facE3(e31);
      e33 = recSuma(e32);
{if ("" != null) return e33;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("e2");
    }
}

  final public Exp recSuma(Exp e3h) throws ParseException {
    trace_call("recSuma");
    try {
Exp e31, e32; Token sum;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case suma:{
        sum = jj_consume_token(suma);
        e31 = e3();
        e32 = recSuma((Exp) sem.suma(e3h, e31).ponFila(sum.beginLine).ponCol(sum.beginColumn));
{if ("" != null) return e32;}
        break;
        }
      default:
        jj_la1[18] = jj_gen;
{if ("" != null) return e3h;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recSuma");
    }
}

  final public Exp facE3(Exp e31h) throws ParseException {
    trace_call("facE3");
    try {
Exp e3; Token subs;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case resta:{
        subs = jj_consume_token(resta);
        e3 = e3();
{if ("" != null) return (Exp) sem.resta(e31h, e3).ponFila(subs.beginLine).ponCol(subs.beginColumn);}
        break;
        }
      default:
        jj_la1[19] = jj_gen;
{if ("" != null) return e31h;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("facE3");
    }
}

  final public Exp e3() throws ParseException {
    trace_call("e3");
    try {
Exp e4, e;
      e4 = e4();
      e = facE4(e4);
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("e3");
    }
}

  final public Exp facE4(Exp e4h) throws ParseException {
    trace_call("facE4");
    try {
Exp e; Token t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case and:{
        t = jj_consume_token(and);
        e = e3();
{if ("" != null) return (Exp) sem.and(e4h, e).ponFila(t.beginLine).ponCol(t.beginColumn);}
        break;
        }
      case or:{
        t = jj_consume_token(or);
        e = e4();
{if ("" != null) return (Exp) sem.or(e4h, e).ponFila(t.beginLine).ponCol(t.beginColumn);}
        break;
        }
      default:
        jj_la1[20] = jj_gen;
{if ("" != null) return e4h;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("facE4");
    }
}

  final public Exp e4() throws ParseException {
    trace_call("e4");
    try {
Exp e51, e52;
      e51 = e5();
      e52 = recOp4(e51);
{if ("" != null) return e52;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("e4");
    }
}

  final public Exp recOp4(Exp e5h) throws ParseException {
    trace_call("recOp4");
    try {
Token op; Exp e51, e52;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case mod:
      case mul:
      case div:{
        op = op4();
        e51 = e5();
        e52 = recOp4((Exp) sem.mkop4Token(op, e5h, e51).ponFila(op.beginLine).ponCol(op.beginColumn));
{if ("" != null) return e52;}
        break;
        }
      default:
        jj_la1[21] = jj_gen;
{if ("" != null) return e5h;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recOp4");
    }
}

  final public Exp e5() throws ParseException {
    trace_call("e5");
    try {
Token op; Exp e;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case not:
      case resta:{
        op = op5();
        e = e5();
{if ("" != null) return (Exp)sem.mkop5Token(op, e).ponFila(op.beginLine).ponCol(op.beginColumn);}
        break;
        }
      case TRUE:
      case FALSE:
      case NULL:
      case iden:
      case literalEntero:
      case literalReal:
      case literalCadena:
      case 52:{
        e = e6();
{if ("" != null) return e;}
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("e5");
    }
}

  final public Exp e6() throws ParseException {
    trace_call("e6");
    try {
Exp e7, e;
      e7 = e7();
      e = recOp6(e7);
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("e6");
    }
}

  final public Exp recOp6(Exp e7h) throws ParseException {
    trace_call("recOp6");
    try {
Exp expr, e; Token id; Token t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case abrirCorchete:{
        t = jj_consume_token(abrirCorchete);
        expr = expr();
        jj_consume_token(56);
        e = recOp6((Exp) sem.index(e7h, expr).ponFila(t.beginLine).ponCol(t.beginColumn));
{if ("" != null) return e;}
        break;
        }
      case 58:{
        jj_consume_token(58);
        id = jj_consume_token(iden);
        e = recOp6((Exp)sem.acceso(e7h, id.image).ponFila(id.beginLine).ponCol(id.beginColumn));
{if ("" != null) return e;}
        break;
        }
      case indir:{
        t = jj_consume_token(indir);
        e = recOp6((Exp) sem.indireccion(e7h).ponFila(t.beginLine).ponCol(t.beginColumn));
{if ("" != null) return e;}
        break;
        }
      default:
        jj_la1[23] = jj_gen;
{if ("" != null) return e7h;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recOp6");
    }
}

  final public Exp e7() throws ParseException {
    trace_call("e7");
    try {
Exp e0; Token id;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 52:{
        jj_consume_token(52);
        e0 = e0();
        jj_consume_token(53);
{if ("" != null) return e0;}
        break;
        }
      case literalEntero:{
        id = jj_consume_token(literalEntero);
{if ("" != null) return (Exp)sem.lit_ent(id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
        }
      case literalReal:{
        id = jj_consume_token(literalReal);
{if ("" != null) return (Exp)sem.lit_real(id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
        }
      case TRUE:{
        jj_consume_token(TRUE);
{if ("" != null) return sem.btrue();}
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
{if ("" != null) return sem.bfalse();}
        break;
        }
      case literalCadena:{
        id = jj_consume_token(literalCadena);
{if ("" != null) return (Exp)sem.lit_cadena(id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
        }
      case iden:{
        id = jj_consume_token(iden);
{if ("" != null) return (Exp)sem.iden(id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
        }
      case NULL:{
        id = jj_consume_token(NULL);
{if ("" != null) return (Exp)sem.vnull().ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("e7");
    }
}

  final public Token op1() throws ParseException {
    trace_call("op1");
    try {
Token t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case menor:{
        t = jj_consume_token(menor);
{if ("" != null) return t;}
        break;
        }
      case mayor:{
        t = jj_consume_token(mayor);
{if ("" != null) return t;}
        break;
        }
      case menorIgual:{
        t = jj_consume_token(menorIgual);
{if ("" != null) return t;}
        break;
        }
      case mayorIgual:{
        t = jj_consume_token(mayorIgual);
{if ("" != null) return t;}
        break;
        }
      case igual:{
        t = jj_consume_token(igual);
{if ("" != null) return t;}
        break;
        }
      case noIgual:{
        t = jj_consume_token(noIgual);
{if ("" != null) return t;}
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("op1");
    }
}

  final public Token op4() throws ParseException {
    trace_call("op4");
    try {
Token t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case mul:{
        t = jj_consume_token(mul);
{if ("" != null) return t;}
        break;
        }
      case div:{
        t = jj_consume_token(div);
{if ("" != null) return t;}
        break;
        }
      case mod:{
        t = jj_consume_token(mod);
{if ("" != null) return t;}
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("op4");
    }
}

  final public Token op5() throws ParseException {
    trace_call("op5");
    try {
Token t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case resta:{
        t = jj_consume_token(resta);
{if ("" != null) return t;}
        break;
        }
      case not:{
        t = jj_consume_token(not);
{if ("" != null) return t;}
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("op5");
    }
}

  /** Generated Token Manager. */
  public ConstructorASTsTinyTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x5045e000,0x0,0x5045e000,0x4041e000,0x0,0x40000000,0x0,0x4041e000,0x4041e000,0x0,0x2fa80000,0x0,0x2fa80000,0x100000,0xc0021c00,0x0,0x0,0x0,0x0,0x0,0x300,0x0,0xc0021c00,0x0,0xc0021800,0x0,0x0,0x400,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x8000,0x80000,0x8000,0x8000,0x400000,0x800000,0x4000,0x8000,0x0,0x400000,0x2010000,0x80000,0x2010000,0x0,0x10000b,0x400000,0x80,0x3f00,0x4,0x8,0x0,0x70,0x10000b,0x400c000,0x100003,0x3f00,0x70,0x8,};
	}

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public ConstructorASTsTiny(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ConstructorASTsTiny(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ConstructorASTsTinyTokenManager(this, jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(this,jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ConstructorASTsTiny(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ConstructorASTsTinyTokenManager(this, jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ConstructorASTsTinyTokenManager(this, jj_input_stream);
	}

	 token_source.ReInit(this,jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ConstructorASTsTiny(ConstructorASTsTinyTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ConstructorASTsTinyTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[59];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 28; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 59; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  private int trace_indent = 0;
/** Enable tracing. */
  final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
	 trace_enabled = false;
  }

  protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

}
