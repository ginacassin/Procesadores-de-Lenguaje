package c_ast_ascendente;

import java_cup.runtime.*;
import asint.ClaseSemanticaTiny;
import asint.SintaxisAbstractaTiny.*;
import c_ast_ascendente.UnidadLexica.StringLocalizado;


scan with {: return getScanner().next_token(); :};

parser code {:
    private GestionErroresTiny errores;
    public void syntax_error(Symbol unidadLexica) {errores.errorSintactico((UnidadLexica)unidadLexica);}
:};
init with {:
    errores = new GestionErroresTiny();
    AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
    alex.fijaGestionErrores(errores);
:};
action code {:
  ClaseSemanticaTiny sem = new ClaseSemanticaTiny();
:}

terminal PABRIR, PCERRAR, BABRIR, BCERRAR, TCERRAR,
         FINDEC, TRUE, FALSE, BITAND, ENTERO, REAL, BOOL, STRING,
         PROC, IF, ELSE, WHILE, STRUCT, NEW, DELETE, READ, WRITE, NL, TYPE,
         CALL, EVAL, PUNTO, COMA, PUNTOCOMA;

terminal StringLocalizado IDEN, LITREAL, LITCADENA, LITENT, TABRIR, PUNTERO, NULL,
            AND, OR, SUMA, RESTA, MOD, MUL, DIV, ASIG, MENOR, MAYOR, MENORIGUAL, MAYORIGUAL, IGUAL, NOIGUAL, NOT;

non terminal Prog programa;
non terminal Bloq bloque;
non terminal Decs declaraciones;
non terminal DecsAux declaracionesAux;
non terminal Dec declaracion, declaracionVar, declaracionTipo, declaracionProc;
non terminal ParamsF paramsFormales, paramsFormalesAux;
non terminal ParamsFL paramsFormalesLista;
non terminal Param param;
non terminal T tipo0, tipo1, tipo2;
non terminal LCampos listaCampos;
non terminal Campo campo;
non terminal Insts instrucciones;
non terminal InstsAux instruccionesAux;
non terminal Inst instruccion;
non terminal ParamsR paramsReales, paramsRealesAux;
non terminal ParamsRL paramsRealesLista;
non terminal Exp expr, e0, e1, e2, e3, e4, e5, e6, e7;
non terminal Op op1, op4, op5;




programa ::= bloque: bloq
    {: RESULT = sem.prog(bloq) ; :};
bloque ::= BABRIR declaraciones: deq instrucciones: insts BCERRAR
    {: RESULT = sem.bloq(deq, insts) ; :};
declaraciones ::= declaracionesAux: decsAux FINDEC
    {: RESULT = sem.si_decs(decsAux) ; :};
declaraciones ::=
    {: RESULT = sem.no_decs() ; :};
declaracionesAux ::= declaracionesAux: decsAux PUNTOCOMA declaracion: dec
    {:RESULT =  sem.muchas_decs(decsAux, dec) ; :};
declaracionesAux ::= declaracion: dec
    {:RESULT =  sem.una_dec(dec) ; :};
declaracion ::= declaracionVar: decVar
    {: RESULT = decVar ; :};
declaracion ::= declaracionTipo: decTipo
    {: RESULT = decTipo ; :};
declaracion ::= declaracionProc: decProc
    {: RESULT = decProc ; :};
declaracionVar ::= tipo0: tipo IDEN: id
    {: RESULT = (Dec)sem.dec_var(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
declaracionTipo ::= TYPE tipo0: tipo IDEN: id
    {: RESULT = (Dec)sem.dec_tipo(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
declaracionProc ::= PROC IDEN: id paramsFormales: paramsF bloque: bloq
    {: RESULT = (Dec)sem.dec_proc(id.str(), paramsF, bloq).ponFila(id.fila()).ponCol(id.col()); :};
paramsFormales ::= PABRIR paramsFormalesAux: paramsFAux PCERRAR
    {: RESULT  = paramsFAux; :};
paramsFormalesAux ::= paramsFormalesLista: paramsFL
    {: RESULT  = sem.si_paramF(paramsFL); :};
paramsFormalesAux ::=
    {: RESULT  = sem.no_paramF(); :};
paramsFormalesLista ::= paramsFormalesLista: paramsFL COMA param: param
    {: RESULT  = sem.muchos_paramsF(paramsFL, param); :};
paramsFormalesLista ::= param: param
    {: RESULT  = sem.un_paramF(param); :};
param ::= tipo0: tipo BITAND IDEN: id
    {: RESULT  = (Param) sem.param_ref(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
param ::= tipo0: tipo IDEN: id
    {: RESULT  = (Param) sem.param(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
tipo0 ::= tipo0: tipo TABRIR LITENT: ent TCERRAR
    {: RESULT  = (T) sem.tipo_array(tipo, ent.str()).ponFila(ent.fila()).ponCol(ent.col()); :};
tipo0 ::= tipo1: tipo
    {: RESULT = tipo ; :};
tipo1 ::= PUNTERO tipo1: tipo
    {: RESULT = sem.tipo_punt(tipo) ; :};
tipo1 ::= tipo2: tipo
    {: RESULT = tipo ; :};
tipo2 ::= STRUCT BABRIR listaCampos: lCampos BCERRAR
    {: RESULT = sem.tipo_struct(lCampos) ; :};
listaCampos ::= listaCampos: lCampos COMA campo: campo
    {: RESULT = sem.muchos_campos(lCampos, campo) ; :};
listaCampos ::= campo: campo
    {: RESULT = sem.un_campo(campo) ; :};
campo ::= tipo0: tipo IDEN: id
    {: RESULT = (Campo) sem.campo(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
tipo2 ::= ENTERO
    {: RESULT = sem.ent() ; :};
tipo2 ::= REAL
    {: RESULT = sem.real() ; :};
tipo2 ::= BOOL
    {: RESULT = sem.bool() ; :};
tipo2 ::= STRING
    {: RESULT = sem.tipo_string() ; :};
tipo2 ::= IDEN: id
    {: RESULT = (T) sem.tipo_iden(id.str()).ponFila(id.fila()).ponCol(id.col()); :};

instrucciones ::= instruccionesAux: instsAux
    {: RESULT = sem.si_instr(instsAux) ; :};
instrucciones ::=
    {: RESULT = sem.no_instr() ; :};
instruccionesAux ::= instruccionesAux: instsAux PUNTOCOMA instruccion: inst
    {: RESULT = sem.muchas_instr(instsAux, inst) ; :};
instruccionesAux ::= instruccion: inst
    {: RESULT = sem.una_instr(inst) ; :};
instruccion ::= EVAL expr: exp
    {: RESULT = sem.instr_expr(exp) ; :};
instruccion ::= IF expr: exp bloque: bloq
    {: RESULT = sem.instr_if(exp, bloq) ; :};
instruccion ::= IF expr: exp bloque: bloq1 ELSE bloque: bloq2
    {: RESULT = sem.instr_if_else(exp, bloq1, bloq2) ; :};
instruccion ::= WHILE expr: exp bloque: bloq
    {: RESULT = sem.instr_while(exp, bloq) ; :};
instruccion ::= READ expr: exp
    {: RESULT = sem.instr_read(exp) ; :};
instruccion ::= WRITE expr: exp
    {: RESULT = sem.instr_write(exp) ; :};
instruccion ::= NL
    {: RESULT = sem.instr_nl() ; :};
instruccion ::= NEW expr: exp
    {: RESULT = sem.instr_new(exp) ; :};
instruccion ::= DELETE expr: exp
    {: RESULT = sem.instr_del(exp) ; :};
instruccion ::= CALL IDEN: id paramsReales: paramsR
    {: RESULT = (Inst) sem.instr_call(id.str(), paramsR).ponFila(id.fila()).ponCol(id.col()); :};
instruccion ::= bloque: bloq
    {: RESULT = sem.instr_bloque(bloq) ; :};
paramsReales ::= PABRIR paramsRealesAux: paramsRAux PCERRAR
    {: RESULT = paramsRAux ; :};
paramsRealesAux ::= paramsRealesLista: paramsRL
    {: RESULT = sem.si_paramsR(paramsRL) ; :};
paramsRealesAux ::=
    {: RESULT = sem.no_paramsR() ; :};
paramsRealesLista ::= paramsRealesLista: paramsRL COMA expr: exp
    {: RESULT = sem.muchos_paramsR(paramsRL, exp) ; :};
paramsRealesLista ::= expr: exp
    {: RESULT = sem.un_paramsR(exp) ; :};

expr ::= e0: exp
    {: RESULT = exp ; :};
e0 ::= e1: exp1 ASIG: signo e0: exp2
    {: RESULT = (Exp) sem.asig(exp1, exp2).ponFila(signo.fila()).ponCol(signo.col()); :};
e0 ::= e1: exp
    {: RESULT = exp ; :};
e1 ::= e1: exp1 op1: op1 e2: exp2
    {: RESULT = (Exp) sem.mkop1(op1.getOp(), exp1, exp2).ponFila(op1.leeFila()).ponCol(op1.leeCol()); :};
e1 ::= e2: exp
    {: RESULT = exp ; :};
e2 ::= e2: exp1 SUMA: signo e3: exp2
    {: RESULT = (Exp) sem.suma(exp1, exp2).ponFila(signo.fila()).ponCol(signo.col()); :};
e2 ::= e3: exp1 RESTA: signo e3: exp2
    {: RESULT = (Exp) sem.resta(exp1, exp2).ponFila(signo.fila()).ponCol(signo.col()); :};
e2 ::= e3: exp
    {: RESULT = exp ; :};
e3 ::= e4: exp1 AND: signo e3: exp2
    {: RESULT = (Exp) sem.and(exp1, exp2).ponFila(signo.fila()).ponCol(signo.col()); :};
e3 ::= e4: exp1 OR: signo e4: exp2
    {: RESULT = (Exp) sem.or(exp1, exp2).ponFila(signo.fila()).ponCol(signo.col()); :};
e3 ::= e4: exp
    {: RESULT = exp ; :};
e4 ::= e4: exp1 op4: op4 e5: exp2
    {: RESULT = (Exp) sem.mkop4(op4.getOp(), exp1, exp2).ponFila(op4.leeFila()).ponCol(op4.leeCol()); :};
e4 ::= e5: exp
    {: RESULT = exp ; :};
e5 ::= op5: op5 e5: exp
    {: RESULT = (Exp) sem.mkop5(op5.getOp(), exp).ponFila(op5.leeFila()).ponCol(op5.leeCol()); :};
e5 ::= e6: exp
    {: RESULT = exp ; :};
e6 ::= e6: exp1 TABRIR: signo expr: exp2 TCERRAR
    {: RESULT = (Exp) sem.index(exp1, exp2).ponFila(signo.fila()).ponCol(signo.col()); :};
e6 ::= e6: exp PUNTO IDEN: id
    {: RESULT = (Exp) sem.acceso(exp, id.str()).ponFila(id.fila()).ponCol(id.col()) ; :};
e6 ::= e6: exp PUNTERO: signo
    {: RESULT = (Exp) sem.indireccion(exp).ponFila(signo.fila()).ponCol(signo.col()) ; :};
e6 ::= e7: exp
    {: RESULT = exp ; :};
e7 ::= PABRIR e0: exp PCERRAR
    {: RESULT = exp ; :};
e7 ::= LITENT: ent
   {: RESULT = (Exp) sem.lit_ent(ent.str()).ponFila(ent.fila()).ponCol(ent.col()); :};
e7 ::= LITREAL: real
   {: RESULT = (Exp) sem.lit_real(real.str()).ponFila(real.fila()).ponCol(real.col()); :};
e7 ::= TRUE
   {: RESULT = sem.btrue(); :};
e7 ::= FALSE
   {: RESULT = sem.bfalse(); :};
e7 ::= LITCADENA: litCadena
   {: RESULT = (Exp) sem.lit_cadena(litCadena.str()).ponFila(litCadena.fila()).ponCol(litCadena.col()); :};
e7 ::= IDEN: id
   {: RESULT = (Exp) sem.iden(id.str()).ponFila(id.fila()).ponCol(id.col()); :};
e7 ::= NULL: id
    {: RESULT = (Exp) sem.vnull().ponFila(id.fila()).ponCol(id.col()); :};
op1 ::= MENOR: signo
    {: RESULT = (Op) sem.op("<").ponFila(signo.fila()).ponCol(signo.col()); :};
op1 ::= MAYOR: signo
    {: RESULT = (Op) sem.op(">").ponFila(signo.fila()).ponCol(signo.col()); :};
op1 ::= MENORIGUAL: signo
    {: RESULT = (Op) sem.op("<=").ponFila(signo.fila()).ponCol(signo.col()); :};
op1 ::= MAYORIGUAL: signo
    {: RESULT = (Op) sem.op(">=").ponFila(signo.fila()).ponCol(signo.col()); :};
op1 ::= IGUAL: signo
    {: RESULT = (Op) sem.op("==").ponFila(signo.fila()).ponCol(signo.col()); :};
op1 ::= NOIGUAL: signo
    {: RESULT = (Op) sem.op("!=").ponFila(signo.fila()).ponCol(signo.col()); :};
op4 ::= MUL: signo
    {: RESULT = (Op) sem.op("*").ponFila(signo.fila()).ponCol(signo.col()); :};
op4 ::= DIV: signo
    {: RESULT = (Op) sem.op("/").ponFila(signo.fila()).ponCol(signo.col()); :};
op4 ::= MOD: signo
    {: RESULT = (Op) sem.op("%").ponFila(signo.fila()).ponCol(signo.col()); :};
op5 ::= RESTA: signo
    {: RESULT = (Op) sem.op("-").ponFila(signo.fila()).ponCol(signo.col()); :};
op5 ::= NOT: signo
    {: RESULT = (Op) sem.op("not").ponFila(signo.fila()).ponCol(signo.col()); :};

