
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue Apr 09 22:21:45 CEST 2024
//----------------------------------------------------

package c_ast_ascendente;

import java_cup.runtime.*;
import asint.ClaseSemanticaTiny;
import asint.SintaxisAbstractaTiny.*;
import c_ast_ascendente.UnidadLexica.StringLocalizado;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue Apr 09 22:21:45 CEST 2024
  */
public class ConstructorASTTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTTiny() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\004\000\002\010\005\000\002" +
    "\011\006\000\002\012\005\000\002\013\003\000\002\013" +
    "\002\000\002\014\005\000\002\014\003\000\002\015\005" +
    "\000\002\015\004\000\002\016\006\000\002\016\003\000" +
    "\002\017\004\000\002\017\003\000\002\020\006\000\002" +
    "\021\005\000\002\021\003\000\002\022\004\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\023\003\000\002\023\002\000" +
    "\002\024\005\000\002\024\003\000\002\025\004\000\002" +
    "\025\005\000\002\025\007\000\002\025\005\000\002\025" +
    "\004\000\002\025\004\000\002\025\003\000\002\025\004" +
    "\000\002\025\004\000\002\025\005\000\002\025\003\000" +
    "\002\026\005\000\002\027\003\000\002\027\002\000\002" +
    "\030\005\000\002\030\003\000\002\031\003\000\002\032" +
    "\005\000\002\032\003\000\002\033\005\000\002\033\003" +
    "\000\002\034\005\000\002\034\005\000\002\034\003\000" +
    "\002\035\005\000\002\035\005\000\002\035\003\000\002" +
    "\036\005\000\002\036\003\000\002\037\004\000\002\037" +
    "\003\000\002\040\006\000\002\040\005\000\002\040\004" +
    "\000\002\040\003\000\002\041\005\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\044\003\000\002" +
    "\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\004\006\005\001\002\000\004\002\220\001" +
    "\002\000\052\006\ufffd\007\ufffd\013\023\014\024\015\021" +
    "\016\016\017\020\020\ufffd\022\ufffd\023\010\024\ufffd\025" +
    "\ufffd\026\ufffd\027\ufffd\030\ufffd\031\015\032\ufffd\033\ufffd" +
    "\037\012\044\017\001\002\000\004\002\001\001\002\000" +
    "\006\011\215\036\216\001\002\000\004\006\205\001\002" +
    "\000\006\011\ufff9\036\ufff9\001\002\000\010\012\uffe1\037" +
    "\uffe1\043\uffe1\001\002\000\006\011\ufff8\036\ufff8\001\002" +
    "\000\006\011\ufffb\036\ufffb\001\002\000\020\013\023\014" +
    "\024\015\021\016\016\023\010\037\012\044\017\001\002" +
    "\000\010\012\uffe2\037\uffe2\043\uffe2\001\002\000\020\013" +
    "\023\014\024\015\021\016\016\023\010\037\012\044\017" +
    "\001\002\000\004\037\164\001\002\000\010\012\uffe3\037" +
    "\uffe3\043\uffe3\001\002\000\006\011\ufffa\036\ufffa\001\002" +
    "\000\010\012\uffe5\037\uffe5\043\uffe5\001\002\000\010\012" +
    "\uffe4\037\uffe4\043\uffe4\001\002\000\030\006\005\007\uffdf" +
    "\020\044\022\037\024\040\025\046\026\035\027\047\030" +
    "\045\032\051\033\050\001\002\000\010\012\uffea\037\uffea" +
    "\043\uffea\001\002\000\010\012\uffec\037\uffec\043\uffec\001" +
    "\002\000\006\037\031\043\032\001\002\000\006\011\ufff7" +
    "\036\ufff7\001\002\000\004\042\033\001\002\000\004\010" +
    "\034\001\002\000\010\012\uffed\037\uffed\043\uffed\001\002" +
    "\000\026\004\055\037\071\040\056\041\062\042\076\045" +
    "\101\046\073\047\100\053\102\066\064\001\002\000\006" +
    "\007\uffe0\036\161\001\002\000\026\004\055\037\071\040" +
    "\056\041\062\042\076\045\101\046\073\047\100\053\102" +
    "\066\064\001\002\000\026\004\055\037\071\040\056\041" +
    "\062\042\076\045\101\046\073\047\100\053\102\066\064" +
    "\001\002\000\006\007\uffd2\036\uffd2\001\002\000\004\007" +
    "\155\001\002\000\006\007\uffdd\036\uffdd\001\002\000\026" +
    "\004\055\037\071\040\056\041\062\042\076\045\101\046" +
    "\073\047\100\053\102\066\064\001\002\000\006\007\uffd6" +
    "\036\uffd6\001\002\000\026\004\055\037\071\040\056\041" +
    "\062\042\076\045\101\046\073\047\100\053\102\066\064" +
    "\001\002\000\026\004\055\037\071\040\056\041\062\042" +
    "\076\045\101\046\073\047\100\053\102\066\064\001\002" +
    "\000\026\004\055\037\071\040\056\041\062\042\076\045" +
    "\101\046\073\047\100\053\102\066\064\001\002\000\004" +
    "\037\052\001\002\000\004\004\053\001\002\000\030\004" +
    "\055\005\uffcf\037\071\040\056\041\062\042\076\045\101" +
    "\046\073\047\100\053\102\066\064\001\002\000\006\007" +
    "\uffd3\036\uffd3\001\002\000\026\004\055\037\071\040\056" +
    "\041\062\042\076\045\101\046\073\047\100\053\102\066" +
    "\064\001\002\000\060\005\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\043\uffb7\044\uffb7\050\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7" +
    "\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\001" +
    "\002\000\006\005\uffcd\035\uffcd\001\002\000\006\005\uffd0" +
    "\035\142\001\002\000\060\005\uffba\006\uffba\007\uffba\010" +
    "\uffba\034\uffba\035\uffba\036\uffba\043\uffba\044\uffba\050\uffba" +
    "\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057" +
    "\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba" +
    "\001\002\000\060\005\uffb4\006\uffb4\007\uffb4\010\uffb4\034" +
    "\uffb4\035\uffb4\036\uffb4\043\uffb4\044\uffb4\050\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\001\002" +
    "\000\060\005\uffbe\006\uffbe\007\uffbe\010\uffbe\034\134\035" +
    "\uffbe\036\uffbe\043\136\044\135\050\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061" +
    "\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\001\002\000\026" +
    "\004\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\045\uffa7\046" +
    "\uffa7\047\uffa7\053\uffa7\066\uffa7\001\002\000\052\005\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\035\uffc0\036\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0" +
    "\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\001" +
    "\002\000\052\005\uffc2\006\uffc2\007\uffc2\010\uffc2\035\uffc2" +
    "\036\uffc2\050\125\051\130\052\uffc2\053\uffc2\054\123\055" +
    "\126\056\127\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2" +
    "\064\uffc2\065\uffc2\001\002\000\040\005\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\035\uffc5\036\uffc5\052\uffc5\053\121\057\uffc5" +
    "\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\001" +
    "\002\000\036\005\uffc8\006\uffc8\007\uffc8\010\uffc8\035\uffc8" +
    "\036\uffc8\052\117\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063" +
    "\uffc8\064\uffc8\065\uffc8\001\002\000\060\005\uffb3\006\uffb3" +
    "\007\uffb3\010\uffb3\034\uffb3\035\uffb3\036\uffb3\043\uffb3\044" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\001\002\000\034\005\uffca\006\uffca\007\uffca" +
    "\010\uffca\035\uffca\036\uffca\057\114\060\112\061\113\062" +
    "\105\063\106\064\107\065\110\001\002\000\060\005\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\034\uffb6\035\uffb6\036\uffb6\043" +
    "\uffb6\044\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6" +
    "\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063" +
    "\uffb6\064\uffb6\065\uffb6\001\002\000\016\005\uffcc\006\uffcc" +
    "\007\uffcc\010\uffcc\035\uffcc\036\uffcc\001\002\000\026\004" +
    "\055\037\071\040\056\041\062\042\076\045\101\046\073" +
    "\047\100\053\102\066\064\001\002\000\060\005\uffb8\006" +
    "\uffb8\007\uffb8\010\uffb8\034\uffb8\035\uffb8\036\uffb8\043\uffb8" +
    "\044\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055" +
    "\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8" +
    "\064\uffb8\065\uffb8\001\002\000\004\005\103\001\002\000" +
    "\060\005\uffb5\006\uffb5\007\uffb5\010\uffb5\034\uffb5\035\uffb5" +
    "\036\uffb5\043\uffb5\044\uffb5\050\uffb5\051\uffb5\052\uffb5\053" +
    "\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\065\uffb5\001\002\000\060\005" +
    "\uffb2\006\uffb2\007\uffb2\010\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\043\uffb2\044\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2" +
    "\063\uffb2\064\uffb2\065\uffb2\001\002\000\026\004\uffa8\037" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\045\uffa8\046\uffa8\047\uffa8" +
    "\053\uffa8\066\uffa8\001\002\000\006\007\uffd1\036\uffd1\001" +
    "\002\000\052\005\uffbf\006\uffbf\007\uffbf\010\uffbf\035\uffbf" +
    "\036\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf" +
    "\064\uffbf\065\uffbf\001\002\000\026\004\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\045\uffaf\046\uffaf\047\uffaf\053\uffaf" +
    "\066\uffaf\001\002\000\026\004\uffae\037\uffae\040\uffae\041" +
    "\uffae\042\uffae\045\uffae\046\uffae\047\uffae\053\uffae\066\uffae" +
    "\001\002\000\026\004\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\045\uffad\046\uffad\047\uffad\053\uffad\066\uffad\001\002" +
    "\000\026\004\uffac\037\uffac\040\uffac\041\uffac\042\uffac\045" +
    "\uffac\046\uffac\047\uffac\053\uffac\066\uffac\001\002\000\026" +
    "\004\055\037\071\040\056\041\062\042\076\045\101\046" +
    "\073\047\100\053\102\066\064\001\002\000\026\004\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\042\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\053\uffb1\066\uffb1\001\002\000\026\004\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\045\uffb0\046\uffb0\047\uffb0\053" +
    "\uffb0\066\uffb0\001\002\000\026\004\055\037\071\040\056" +
    "\041\062\042\076\045\101\046\073\047\100\053\102\066" +
    "\064\001\002\000\016\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\035\uffcb\036\uffcb\001\002\000\036\005\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\035\uffc9\036\uffc9\052\117\057\uffc9\060\uffc9" +
    "\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\001\002\000" +
    "\026\004\055\037\071\040\056\041\062\042\076\045\101" +
    "\046\073\047\100\053\102\066\064\001\002\000\036\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\035\uffc7\036\uffc7\052\uffc7" +
    "\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\001\002\000\026\004\055\037\071\040\056\041\062" +
    "\042\076\045\101\046\073\047\100\053\102\066\064\001" +
    "\002\000\036\005\uffc6\006\uffc6\007\uffc6\010\uffc6\035\uffc6" +
    "\036\uffc6\052\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063" +
    "\uffc6\064\uffc6\065\uffc6\001\002\000\026\004\uffa9\037\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\045\uffa9\046\uffa9\047\uffa9\053" +
    "\uffa9\066\uffa9\001\002\000\026\004\055\037\071\040\056" +
    "\041\062\042\076\045\101\046\073\047\100\053\102\066" +
    "\064\001\002\000\026\004\055\037\071\040\056\041\062" +
    "\042\076\045\101\046\073\047\100\053\102\066\064\001" +
    "\002\000\026\004\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\045\uffab\046\uffab\047\uffab\053\uffab\066\uffab\001\002\000" +
    "\026\004\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\045\uffaa" +
    "\046\uffaa\047\uffaa\053\uffaa\066\uffaa\001\002\000\026\004" +
    "\055\037\071\040\056\041\062\042\076\045\101\046\073" +
    "\047\100\053\102\066\064\001\002\000\046\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\035\uffc3\036\uffc3\052\uffc3\053\uffc3" +
    "\054\123\055\126\056\127\057\uffc3\060\uffc3\061\uffc3\062" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\001\002\000\040\005\uffc4" +
    "\006\uffc4\007\uffc4\010\uffc4\035\uffc4\036\uffc4\052\uffc4\053" +
    "\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4" +
    "\065\uffc4\001\002\000\052\005\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\035\uffc1\036\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062" +
    "\uffc1\063\uffc1\064\uffc1\065\uffc1\001\002\000\004\037\141" +
    "\001\002\000\060\005\uffbb\006\uffbb\007\uffbb\010\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\043\uffbb\044\uffbb\050\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\001\002" +
    "\000\026\004\055\037\071\040\056\041\062\042\076\045" +
    "\101\046\073\047\100\053\102\066\064\001\002\000\004" +
    "\010\140\001\002\000\060\005\uffbd\006\uffbd\007\uffbd\010" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\043\uffbd\044\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd" +
    "\001\002\000\060\005\uffbc\006\uffbc\007\uffbc\010\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\043\uffbc\044\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\001\002" +
    "\000\026\004\055\037\071\040\056\041\062\042\076\045" +
    "\101\046\073\047\100\053\102\066\064\001\002\000\006" +
    "\005\uffce\035\uffce\001\002\000\004\005\145\001\002\000" +
    "\060\005\uffb9\006\uffb9\007\uffb9\010\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\043\uffb9\044\uffb9\050\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9" +
    "\062\uffb9\063\uffb9\064\uffb9\065\uffb9\001\002\000\006\007" +
    "\uffdc\036\uffdc\001\002\000\006\007\uffd7\036\uffd7\001\002" +
    "\000\006\007\uffd4\036\uffd4\001\002\000\004\006\005\001" +
    "\002\000\010\007\uffdb\021\153\036\uffdb\001\002\000\004" +
    "\006\005\001\002\000\006\007\uffda\036\uffda\001\002\000" +
    "\014\002\uffff\007\uffff\011\uffff\021\uffff\036\uffff\001\002" +
    "\000\006\007\uffd5\036\uffd5\001\002\000\004\006\005\001" +
    "\002\000\006\007\uffd9\036\uffd9\001\002\000\026\006\005" +
    "\020\044\022\037\024\040\025\046\026\035\027\047\030" +
    "\045\032\051\033\050\001\002\000\006\007\uffde\036\uffde" +
    "\001\002\000\006\007\uffd8\036\uffd8\001\002\000\004\004" +
    "\166\001\002\000\004\006\005\001\002\000\022\005\ufff2" +
    "\013\023\014\024\015\021\016\016\023\010\037\012\044" +
    "\017\001\002\000\010\012\176\037\177\043\032\001\002" +
    "\000\004\005\175\001\002\000\006\005\ufff0\035\ufff0\001" +
    "\002\000\006\005\ufff3\035\173\001\002\000\020\013\023" +
    "\014\024\015\021\016\016\023\010\037\012\044\017\001" +
    "\002\000\006\005\ufff1\035\ufff1\001\002\000\004\006\ufff4" +
    "\001\002\000\004\037\200\001\002\000\006\005\uffee\035" +
    "\uffee\001\002\000\006\005\uffef\035\uffef\001\002\000\006" +
    "\011\ufff5\036\ufff5\001\002\000\010\012\uffeb\037\uffeb\043" +
    "\uffeb\001\002\000\006\037\204\043\032\001\002\000\006" +
    "\011\ufff6\036\ufff6\001\002\000\020\013\023\014\024\015" +
    "\021\016\016\023\010\037\012\044\017\001\002\000\006" +
    "\037\214\043\032\001\002\000\006\007\212\035\211\001" +
    "\002\000\006\007\uffe7\035\uffe7\001\002\000\020\013\023" +
    "\014\024\015\021\016\016\023\010\037\012\044\017\001" +
    "\002\000\010\012\uffe9\037\uffe9\043\uffe9\001\002\000\006" +
    "\007\uffe8\035\uffe8\001\002\000\006\007\uffe6\035\uffe6\001" +
    "\002\000\030\006\ufffe\007\ufffe\020\ufffe\022\ufffe\024\ufffe" +
    "\025\ufffe\026\ufffe\027\ufffe\030\ufffe\032\ufffe\033\ufffe\001" +
    "\002\000\024\013\023\014\024\015\021\016\016\017\020" +
    "\023\010\031\015\037\012\044\017\001\002\000\006\011" +
    "\ufffc\036\ufffc\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\024\004\024\005\006\006\013\007\021\010\010" +
    "\011\012\016\027\017\026\020\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\202\017\026\020\025\001\001\000\002\001\001" +
    "\000\006\017\201\020\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\040\023\041\024\035\025\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\031\162\032\073\033\071\034\067" +
    "\035\066\036\065\037\064\040\062\041\060\044\074\001" +
    "\001\000\002\001\001\000\026\031\156\032\073\033\071" +
    "\034\067\035\066\036\065\037\064\040\062\041\060\044" +
    "\074\001\001\000\026\031\155\032\073\033\071\034\067" +
    "\035\066\036\065\037\064\040\062\041\060\044\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\031\150\032\073\033\071\034\067\035\066\036" +
    "\065\037\064\040\062\041\060\044\074\001\001\000\002" +
    "\001\001\000\026\031\147\032\073\033\071\034\067\035" +
    "\066\036\065\037\064\040\062\041\060\044\074\001\001" +
    "\000\026\031\146\032\073\033\071\034\067\035\066\036" +
    "\065\037\064\040\062\041\060\044\074\001\001\000\026" +
    "\031\145\032\073\033\071\034\067\035\066\036\065\037" +
    "\064\040\062\041\060\044\074\001\001\000\002\001\001" +
    "\000\004\026\053\001\001\000\032\027\076\030\057\031" +
    "\056\032\073\033\071\034\067\035\066\036\065\037\064" +
    "\040\062\041\060\044\074\001\001\000\002\001\001\000" +
    "\024\032\143\033\071\034\067\035\066\036\065\037\064" +
    "\040\062\041\060\044\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\037\103\040\062" +
    "\041\060\044\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\034\115\035\066\036\065\037\064\040\062\041\060\044" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\032\114\033\071\034\067\035\066\036\065\037\064\040" +
    "\062\041\060\044\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\035\117\036\065\037\064\040\062\041" +
    "\060\044\074\001\001\000\002\001\001\000\016\035\121" +
    "\036\065\037\064\040\062\041\060\044\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\037\132\040\062" +
    "\041\060\044\074\001\001\000\016\035\131\036\065\037" +
    "\064\040\062\041\060\044\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\036\130\037\064\040\062\041" +
    "\060\044\074\001\001\000\004\043\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\031\136\032\073\033\071\034\067\035\066" +
    "\036\065\037\064\040\062\041\060\044\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\031\142\032\073\033\071\034\067\035\066\036\065\037" +
    "\064\040\062\041\060\044\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\151\001\001" +
    "\000\002\001\001\000\004\003\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\157" +
    "\001\001\000\002\001\001\000\006\003\040\025\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\164" +
    "\001\001\000\004\003\200\001\001\000\016\013\167\014" +
    "\171\015\170\016\166\017\026\020\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\173\016\166\017\026\020\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\205\017\026\020\025\021\206\022\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\205\017\026\020\025\022\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\216\007\021\010\010\011\012\016\027\017\026" +
    "\020\025\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    errores = new GestionErroresTiny();
    AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
    alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


    private GestionErroresTiny errores;
    public void syntax_error(Symbol unidadLexica) {errores.errorSintactico((UnidadLexica)unidadLexica);}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTTiny$actions {


  ClaseSemanticaTiny sem = new ClaseSemanticaTiny();

  private final ConstructorASTTiny parser;

  /** Constructor */
  CUP$ConstructorASTTiny$actions(ConstructorASTTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTTiny$do_action_part00000000(
    int                        CUP$ConstructorASTTiny$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTTiny$parser,
    java.util.Stack            CUP$ConstructorASTTiny$stack,
    int                        CUP$ConstructorASTTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTTiny$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              Prog RESULT =null;
		Bloq bloq = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.prog(bloq) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("programa",0, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTTiny$parser.done_parsing();
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= BABRIR declaraciones instrucciones BCERRAR 
            {
              Bloq RESULT =null;
		Decs deq = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Insts insts = (Insts)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.bloq(deq, insts) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("bloque",1, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= declaracionesAux FINDEC 
            {
              Decs RESULT =null;
		DecsAux decsAux = (DecsAux)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.si_decs(decsAux) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",2, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= 
            {
              Decs RESULT =null;
		 RESULT = sem.no_decs() ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",2, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracionesAux ::= declaracionesAux PUNTOCOMA declaracion 
            {
              DecsAux RESULT =null;
		DecsAux decsAux = (DecsAux)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		RESULT =  sem.muchas_decs(decsAux, dec) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracionesAux",3, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracionesAux ::= declaracion 
            {
              DecsAux RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		RESULT =  sem.una_dec(dec) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracionesAux",3, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= declaracionVar 
            {
              Dec RESULT =null;
		Dec decVar = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = decVar ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= declaracionTipo 
            {
              Dec RESULT =null;
		Dec decTipo = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = decTipo ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= declaracionProc 
            {
              Dec RESULT =null;
		Dec decProc = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = decProc ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionVar ::= tipo0 IDEN 
            {
              Dec RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_var(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracionVar",5, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracionTipo ::= TYPE tipo0 IDEN 
            {
              Dec RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_tipo(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracionTipo",6, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracionProc ::= PROC IDEN paramsFormales bloque 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		ParamsF paramsF = (ParamsF)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Bloq bloq = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_proc(id.str(), paramsF, bloq).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracionProc",7, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramsFormales ::= PABRIR paramsFormalesAux PCERRAR 
            {
              ParamsF RESULT =null;
		ParamsF paramsFAux = (ParamsF)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT  = paramsFAux; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsFormales",8, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramsFormalesAux ::= paramsFormalesLista 
            {
              ParamsF RESULT =null;
		ParamsFL paramsFL = (ParamsFL)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT  = sem.si_paramF(paramsFL); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsFormalesAux",9, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramsFormalesAux ::= 
            {
              ParamsF RESULT =null;
		 RESULT  = sem.no_paramF(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsFormalesAux",9, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // paramsFormalesLista ::= paramsFormalesLista COMA param 
            {
              ParamsFL RESULT =null;
		ParamsFL paramsFL = (ParamsFL)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT  = sem.muchos_paramsF(paramsFL, param); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsFormalesLista",10, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // paramsFormalesLista ::= param 
            {
              ParamsFL RESULT =null;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT  = sem.un_paramF(param); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsFormalesLista",10, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // param ::= tipo0 BITAND IDEN 
            {
              Param RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT  = (Param) sem.param_ref(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("param",11, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param ::= tipo0 IDEN 
            {
              Param RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT  = (Param) sem.param(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("param",11, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo0 ::= tipo0 TABRIR LITENT TCERRAR 
            {
              T RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		StringLocalizado ent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT  = (T) sem.tipo_array(tipo, ent.str()).ponFila(ent.fila()).ponCol(ent.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo0",12, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo0 ::= tipo1 
            {
              T RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = tipo ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo0",12, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo1 ::= PUNTERO tipo1 
            {
              T RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.tipo_punt(tipo) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo1",13, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo1 ::= tipo2 
            {
              T RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = tipo ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo1",13, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo2 ::= STRUCT BABRIR listaCampos BCERRAR 
            {
              T RESULT =null;
		LCampos lCampos = (LCampos)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.tipo_struct(lCampos) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listaCampos ::= listaCampos COMA campo 
            {
              LCampos RESULT =null;
		LCampos lCampos = (LCampos)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchos_campos(lCampos, campo) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("listaCampos",15, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listaCampos ::= campo 
            {
              LCampos RESULT =null;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.un_campo(campo) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("listaCampos",15, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // campo ::= tipo0 IDEN 
            {
              Campo RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Campo) sem.campo(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("campo",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo2 ::= ENTERO 
            {
              T RESULT =null;
		 RESULT = sem.ent() ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo2 ::= REAL 
            {
              T RESULT =null;
		 RESULT = sem.real() ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo2 ::= BOOL 
            {
              T RESULT =null;
		 RESULT = sem.bool() ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo2 ::= STRING 
            {
              T RESULT =null;
		 RESULT = sem.tipo_string() ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo2 ::= IDEN 
            {
              T RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (T) sem.tipo_iden(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instrucciones ::= instruccionesAux 
            {
              Insts RESULT =null;
		InstsAux instsAux = (InstsAux)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.si_instr(instsAux) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",17, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instrucciones ::= 
            {
              Insts RESULT =null;
		 RESULT = sem.no_instr() ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",17, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccionesAux ::= instruccionesAux PUNTOCOMA instruccion 
            {
              InstsAux RESULT =null;
		InstsAux instsAux = (InstsAux)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchas_instr(instsAux, inst) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccionesAux",18, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccionesAux ::= instruccion 
            {
              InstsAux RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.una_instr(inst) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccionesAux",18, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= EVAL expr 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.instr_expr(exp) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= IF expr bloque 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Bloq bloq = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.instr_if(exp, bloq) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= IF expr bloque ELSE bloque 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		Bloq bloq1 = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Bloq bloq2 = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.instr_if_else(exp, bloq1, bloq2) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= WHILE expr bloque 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Bloq bloq = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.instr_while(exp, bloq) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= READ expr 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.instr_read(exp) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= WRITE expr 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.instr_write(exp) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= NL 
            {
              Inst RESULT =null;
		 RESULT = sem.instr_nl() ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= NEW expr 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.instr_new(exp) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= DELETE expr 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.instr_del(exp) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= CALL IDEN paramsReales 
            {
              Inst RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		ParamsR paramsR = (ParamsR)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Inst) sem.instr_call(id.str(), paramsR).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion ::= bloque 
            {
              Inst RESULT =null;
		Bloq bloq = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.instr_bloque(bloq) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // paramsReales ::= PABRIR paramsRealesAux PCERRAR 
            {
              ParamsR RESULT =null;
		ParamsR paramsRAux = (ParamsR)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = paramsRAux ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsReales",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // paramsRealesAux ::= paramsRealesLista 
            {
              ParamsR RESULT =null;
		ParamsRL paramsRL = (ParamsRL)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.si_paramsR(paramsRL) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsRealesAux",21, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // paramsRealesAux ::= 
            {
              ParamsR RESULT =null;
		 RESULT = sem.no_paramsR() ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsRealesAux",21, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // paramsRealesLista ::= paramsRealesLista COMA expr 
            {
              ParamsRL RESULT =null;
		ParamsRL paramsRL = (ParamsRL)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchos_paramsR(paramsRL, exp) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsRealesLista",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // paramsRealesLista ::= expr 
            {
              ParamsRL RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.un_paramsR(exp) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsRealesLista",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= e0 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("expr",23, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // e0 ::= e1 ASIG e0 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado signo = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.asig(exp1, exp2).ponFila(signo.fila()).ponCol(signo.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e0",24, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // e0 ::= e1 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e0",24, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // e1 ::= e1 op1 e2 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Op op1 = (Op)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.mkop1(op1.getOp(), exp1, exp2).ponFila(op1.leeFila()).ponCol(op1.leeCol()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e1",25, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // e1 ::= e2 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e1",25, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // e2 ::= e2 SUMA e3 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado signo = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.suma(exp1, exp2).ponFila(signo.fila()).ponCol(signo.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e2",26, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // e2 ::= e3 RESTA e3 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado signo = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.resta(exp1, exp2).ponFila(signo.fila()).ponCol(signo.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e2",26, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // e2 ::= e3 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e2",26, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // e3 ::= e4 AND e3 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado signo = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.and(exp1, exp2).ponFila(signo.fila()).ponCol(signo.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e3",27, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // e3 ::= e4 OR e4 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado signo = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.or(exp1, exp2).ponFila(signo.fila()).ponCol(signo.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e3",27, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // e3 ::= e4 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e3",27, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // e4 ::= e4 op4 e5 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Op op4 = (Op)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.mkop4(op4.getOp(), exp1, exp2).ponFila(op4.leeFila()).ponCol(op4.leeCol()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e4",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // e4 ::= e5 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e4",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // e5 ::= op5 e5 
            {
              Exp RESULT =null;
		Op op5 = (Op)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.mkop5(op5.getOp(), exp).ponFila(op5.leeFila()).ponCol(op5.leeCol()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e5",29, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // e5 ::= e6 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e5",29, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // e6 ::= e6 TABRIR expr TCERRAR 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		StringLocalizado signo = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = (Exp) sem.index(exp1, exp2).ponFila(signo.fila()).ponCol(signo.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e6",30, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // e6 ::= e6 PUNTO IDEN 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.acceso(exp, id.str()).ponFila(id.fila()).ponCol(id.col()) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e6",30, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // e6 ::= e6 PUNTERO 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado signo = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.indireccion(exp).ponFila(signo.fila()).ponCol(signo.col()) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e6",30, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // e6 ::= e7 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e6",30, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // e7 ::= PABRIR e0 PCERRAR 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = exp ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e7",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // e7 ::= LITENT 
            {
              Exp RESULT =null;
		StringLocalizado ent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.lit_ent(ent.str()).ponFila(ent.fila()).ponCol(ent.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e7",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // e7 ::= LITREAL 
            {
              Exp RESULT =null;
		StringLocalizado real = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.lit_real(real.str()).ponFila(real.fila()).ponCol(real.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e7",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // e7 ::= TRUE 
            {
              Exp RESULT =null;
		StringLocalizado btrue = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.btrue().ponFila(btrue.fila()).ponCol(btrue.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e7",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // e7 ::= FALSE 
            {
              Exp RESULT =null;
		StringLocalizado bfalse = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.bfalse().ponFila(bfalse.fila()).ponCol(bfalse.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e7",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // e7 ::= LITCADENA 
            {
              Exp RESULT =null;
		StringLocalizado litCadena = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.lit_cadena(litCadena.str()).ponFila(litCadena.fila()).ponCol(litCadena.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e7",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // e7 ::= IDEN 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.iden(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e7",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // e7 ::= NULL 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.vnull().ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e7",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // op1 ::= MENOR 
            {
              Op RESULT =null;
		StringLocalizado signo = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Op) sem.op("<").ponFila(signo.fila()).ponCol(signo.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",32, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // op1 ::= MAYOR 
            {
              Op RESULT =null;
		StringLocalizado signo = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Op) sem.op(">").ponFila(signo.fila()).ponCol(signo.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",32, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // op1 ::= MENORIGUAL 
            {
              Op RESULT =null;
		StringLocalizado signo = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Op) sem.op("<=").ponFila(signo.fila()).ponCol(signo.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",32, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // op1 ::= MAYORIGUAL 
            {
              Op RESULT =null;
		StringLocalizado signo = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Op) sem.op(">=").ponFila(signo.fila()).ponCol(signo.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",32, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // op1 ::= IGUAL 
            {
              Op RESULT =null;
		StringLocalizado signo = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Op) sem.op("==").ponFila(signo.fila()).ponCol(signo.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",32, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // op1 ::= NOIGUAL 
            {
              Op RESULT =null;
		StringLocalizado signo = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Op) sem.op("!=").ponFila(signo.fila()).ponCol(signo.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",32, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // op4 ::= MUL 
            {
              Op RESULT =null;
		StringLocalizado signo = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Op) sem.op("*").ponFila(signo.fila()).ponCol(signo.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op4",33, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // op4 ::= DIV 
            {
              Op RESULT =null;
		StringLocalizado signo = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Op) sem.op("/").ponFila(signo.fila()).ponCol(signo.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op4",33, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // op4 ::= MOD 
            {
              Op RESULT =null;
		StringLocalizado signo = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Op) sem.op("%").ponFila(signo.fila()).ponCol(signo.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op4",33, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // op5 ::= RESTA 
            {
              Op RESULT =null;
		StringLocalizado signo = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Op) sem.op("-").ponFila(signo.fila()).ponCol(signo.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op5",34, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // op5 ::= NOT 
            {
              Op RESULT =null;
		StringLocalizado signo = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Op) sem.op("not").ponFila(signo.fila()).ponCol(signo.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op5",34, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTTiny$do_action(
    int                        CUP$ConstructorASTTiny$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTTiny$parser,
    java.util.Stack            CUP$ConstructorASTTiny$stack,
    int                        CUP$ConstructorASTTiny$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTTiny$do_action_part00000000(
                               CUP$ConstructorASTTiny$act_num,
                               CUP$ConstructorASTTiny$parser,
                               CUP$ConstructorASTTiny$stack,
                               CUP$ConstructorASTTiny$top);
    }
}

