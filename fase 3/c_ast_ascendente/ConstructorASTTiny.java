
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Apr 06 04:39:09 CEST 2024
//----------------------------------------------------

package c_ast_ascendente;

import java_cup.runtime.*;
import asint.ClaseSemanticaTiny;
import asint.SintaxisAbstractaTiny.*;
import c_ast_ascendente.UnidadLexica.StringLocalizado;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Apr 06 04:39:09 CEST 2024
  */
public class ConstructorASTTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTTiny() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\004\000\002\010\005\000\002" +
    "\011\006\000\002\012\005\000\002\013\003\000\002\013" +
    "\002\000\002\014\005\000\002\014\003\000\002\015\005" +
    "\000\002\015\004\000\002\016\006\000\002\016\003\000" +
    "\002\017\004\000\002\017\003\000\002\020\006\000\002" +
    "\021\005\000\002\021\003\000\002\022\004\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\023\003\000\002\023\002\000" +
    "\002\024\005\000\002\024\003\000\002\025\004\000\002" +
    "\025\005\000\002\025\007\000\002\025\005\000\002\025" +
    "\004\000\002\025\004\000\002\025\003\000\002\025\004" +
    "\000\002\025\004\000\002\025\005\000\002\025\003\000" +
    "\002\026\005\000\002\027\003\000\002\027\002\000\002" +
    "\030\005\000\002\030\003\000\002\031\003\000\002\032" +
    "\005\000\002\032\003\000\002\033\005\000\002\033\003" +
    "\000\002\034\005\000\002\034\005\000\002\034\003\000" +
    "\002\035\005\000\002\035\005\000\002\035\003\000\002" +
    "\036\005\000\002\036\003\000\002\037\004\000\002\037" +
    "\003\000\002\040\006\000\002\040\005\000\002\040\004" +
    "\000\002\040\003\000\002\041\005\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\044\003\000\002" +
    "\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\004\012\005\001\002\000\004\002\220\001" +
    "\002\000\052\012\ufffd\013\ufffd\034\017\036\023\037\024" +
    "\040\021\041\016\043\020\044\ufffd\046\ufffd\047\010\050" +
    "\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\015\056\ufffd" +
    "\057\ufffd\063\012\001\002\000\004\002\001\001\002\000" +
    "\006\016\215\062\216\001\002\000\004\012\205\001\002" +
    "\000\006\016\ufff9\062\ufff9\001\002\000\010\014\uffe1\035" +
    "\uffe1\063\uffe1\001\002\000\006\016\ufff8\062\ufff8\001\002" +
    "\000\006\016\ufffb\062\ufffb\001\002\000\020\034\017\036" +
    "\023\037\024\040\021\041\016\047\010\063\012\001\002" +
    "\000\010\014\uffe2\035\uffe2\063\uffe2\001\002\000\020\034" +
    "\017\036\023\037\024\040\021\041\016\047\010\063\012" +
    "\001\002\000\004\063\164\001\002\000\010\014\uffe3\035" +
    "\uffe3\063\uffe3\001\002\000\006\016\ufffa\062\ufffa\001\002" +
    "\000\010\014\uffe5\035\uffe5\063\uffe5\001\002\000\010\014" +
    "\uffe4\035\uffe4\063\uffe4\001\002\000\030\012\005\013\uffdf" +
    "\044\044\046\037\050\040\051\046\052\035\053\047\054" +
    "\045\056\051\057\050\001\002\000\010\014\uffea\035\uffea" +
    "\063\uffea\001\002\000\010\014\uffec\035\uffec\063\uffec\001" +
    "\002\000\006\014\032\063\031\001\002\000\006\016\ufff7" +
    "\062\ufff7\001\002\000\004\066\033\001\002\000\004\015" +
    "\034\001\002\000\010\014\uffed\035\uffed\063\uffed\001\002" +
    "\000\026\005\102\010\055\030\064\031\073\032\100\042" +
    "\101\063\071\064\056\065\062\066\076\001\002\000\006" +
    "\013\uffe0\062\161\001\002\000\026\005\102\010\055\030" +
    "\064\031\073\032\100\042\101\063\071\064\056\065\062" +
    "\066\076\001\002\000\026\005\102\010\055\030\064\031" +
    "\073\032\100\042\101\063\071\064\056\065\062\066\076" +
    "\001\002\000\006\013\uffd2\062\uffd2\001\002\000\004\013" +
    "\155\001\002\000\006\013\uffdd\062\uffdd\001\002\000\026" +
    "\005\102\010\055\030\064\031\073\032\100\042\101\063" +
    "\071\064\056\065\062\066\076\001\002\000\006\013\uffd6" +
    "\062\uffd6\001\002\000\026\005\102\010\055\030\064\031" +
    "\073\032\100\042\101\063\071\064\056\065\062\066\076" +
    "\001\002\000\026\005\102\010\055\030\064\031\073\032" +
    "\100\042\101\063\071\064\056\065\062\066\076\001\002" +
    "\000\026\005\102\010\055\030\064\031\073\032\100\042" +
    "\101\063\071\064\056\065\062\066\076\001\002\000\004" +
    "\063\052\001\002\000\004\010\053\001\002\000\030\005" +
    "\102\010\055\011\uffcf\030\064\031\073\032\100\042\101" +
    "\063\071\064\056\065\062\066\076\001\002\000\006\013" +
    "\uffd3\062\uffd3\001\002\000\026\005\102\010\055\030\064" +
    "\031\073\032\100\042\101\063\071\064\056\065\062\066" +
    "\076\001\002\000\060\004\uffb7\005\uffb7\006\uffb7\007\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7" +
    "\027\uffb7\033\uffb7\034\uffb7\060\uffb7\061\uffb7\062\uffb7\001" +
    "\002\000\006\011\uffcd\061\uffcd\001\002\000\006\011\uffd0" +
    "\061\142\001\002\000\060\004\uffba\005\uffba\006\uffba\007" +
    "\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\027\uffba\033\uffba\034\uffba\060\uffba\061\uffba\062\uffba" +
    "\001\002\000\060\004\uffb4\005\uffb4\006\uffb4\007\uffb4\011" +
    "\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027" +
    "\uffb4\033\uffb4\034\uffb4\060\uffb4\061\uffb4\062\uffb4\001\002" +
    "\000\060\004\uffbe\005\uffbe\006\uffbe\007\uffbe\011\uffbe\012" +
    "\uffbe\013\uffbe\014\136\015\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\033" +
    "\uffbe\034\135\060\134\061\uffbe\062\uffbe\001\002\000\026" +
    "\005\uffa7\010\uffa7\030\uffa7\031\uffa7\032\uffa7\042\uffa7\063" +
    "\uffa7\064\uffa7\065\uffa7\066\uffa7\001\002\000\052\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\011\uffc0\012\uffc0\013\uffc0\015" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\033\uffc0\061\uffc0\062\uffc0\001" +
    "\002\000\052\004\uffc2\005\uffc2\006\126\007\127\011\uffc2" +
    "\012\uffc2\013\uffc2\015\uffc2\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\125\027\130\033\123" +
    "\061\uffc2\062\uffc2\001\002\000\040\004\uffc5\005\121\011" +
    "\uffc5\012\uffc5\013\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\061\uffc5\062\uffc5\001" +
    "\002\000\036\004\117\011\uffc8\012\uffc8\013\uffc8\015\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\061\uffc8\062\uffc8\001\002\000\060\004\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015" +
    "\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3" +
    "\025\uffb3\026\uffb3\027\uffb3\033\uffb3\034\uffb3\060\uffb3\061" +
    "\uffb3\062\uffb3\001\002\000\034\011\uffca\012\uffca\013\uffca" +
    "\015\uffca\017\114\020\112\021\113\022\105\023\106\024" +
    "\107\025\110\061\uffca\062\uffca\001\002\000\060\004\uffb6" +
    "\005\uffb6\006\uffb6\007\uffb6\011\uffb6\012\uffb6\013\uffb6\014" +
    "\uffb6\015\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\027\uffb6\033\uffb6\034\uffb6\060" +
    "\uffb6\061\uffb6\062\uffb6\001\002\000\016\011\uffcc\012\uffcc" +
    "\013\uffcc\015\uffcc\061\uffcc\062\uffcc\001\002\000\026\005" +
    "\102\010\055\030\064\031\073\032\100\042\101\063\071" +
    "\064\056\065\062\066\076\001\002\000\060\004\uffb8\005" +
    "\uffb8\006\uffb8\007\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\033\uffb8\034\uffb8\060\uffb8" +
    "\061\uffb8\062\uffb8\001\002\000\004\011\103\001\002\000" +
    "\060\004\uffb5\005\uffb5\006\uffb5\007\uffb5\011\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\033\uffb5" +
    "\034\uffb5\060\uffb5\061\uffb5\062\uffb5\001\002\000\060\004" +
    "\uffb2\005\uffb2\006\uffb2\007\uffb2\011\uffb2\012\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\033\uffb2\034\uffb2" +
    "\060\uffb2\061\uffb2\062\uffb2\001\002\000\026\005\uffa8\010" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\042\uffa8\063\uffa8\064\uffa8" +
    "\065\uffa8\066\uffa8\001\002\000\006\013\uffd1\062\uffd1\001" +
    "\002\000\052\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\015\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\033\uffbf" +
    "\061\uffbf\062\uffbf\001\002\000\026\005\uffaf\010\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\042\uffaf\063\uffaf\064\uffaf\065\uffaf" +
    "\066\uffaf\001\002\000\026\005\uffae\010\uffae\030\uffae\031" +
    "\uffae\032\uffae\042\uffae\063\uffae\064\uffae\065\uffae\066\uffae" +
    "\001\002\000\026\005\uffad\010\uffad\030\uffad\031\uffad\032" +
    "\uffad\042\uffad\063\uffad\064\uffad\065\uffad\066\uffad\001\002" +
    "\000\026\005\uffac\010\uffac\030\uffac\031\uffac\032\uffac\042" +
    "\uffac\063\uffac\064\uffac\065\uffac\066\uffac\001\002\000\026" +
    "\005\102\010\055\030\064\031\073\032\100\042\101\063" +
    "\071\064\056\065\062\066\076\001\002\000\026\005\uffb1" +
    "\010\uffb1\030\uffb1\031\uffb1\032\uffb1\042\uffb1\063\uffb1\064" +
    "\uffb1\065\uffb1\066\uffb1\001\002\000\026\005\uffb0\010\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\042\uffb0\063\uffb0\064\uffb0\065" +
    "\uffb0\066\uffb0\001\002\000\026\005\102\010\055\030\064" +
    "\031\073\032\100\042\101\063\071\064\056\065\062\066" +
    "\076\001\002\000\016\011\uffcb\012\uffcb\013\uffcb\015\uffcb" +
    "\061\uffcb\062\uffcb\001\002\000\036\004\117\011\uffc9\012" +
    "\uffc9\013\uffc9\015\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\061\uffc9\062\uffc9\001\002\000" +
    "\026\005\102\010\055\030\064\031\073\032\100\042\101" +
    "\063\071\064\056\065\062\066\076\001\002\000\036\004" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\015\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\061\uffc7\062" +
    "\uffc7\001\002\000\026\005\102\010\055\030\064\031\073" +
    "\032\100\042\101\063\071\064\056\065\062\066\076\001" +
    "\002\000\036\004\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\061\uffc6\062\uffc6\001\002\000\026\005\uffa9\010\uffa9" +
    "\030\uffa9\031\uffa9\032\uffa9\042\uffa9\063\uffa9\064\uffa9\065" +
    "\uffa9\066\uffa9\001\002\000\026\005\102\010\055\030\064" +
    "\031\073\032\100\042\101\063\071\064\056\065\062\066" +
    "\076\001\002\000\026\005\102\010\055\030\064\031\073" +
    "\032\100\042\101\063\071\064\056\065\062\066\076\001" +
    "\002\000\026\005\uffab\010\uffab\030\uffab\031\uffab\032\uffab" +
    "\042\uffab\063\uffab\064\uffab\065\uffab\066\uffab\001\002\000" +
    "\026\005\uffaa\010\uffaa\030\uffaa\031\uffaa\032\uffaa\042\uffaa" +
    "\063\uffaa\064\uffaa\065\uffaa\066\uffaa\001\002\000\026\005" +
    "\102\010\055\030\064\031\073\032\100\042\101\063\071" +
    "\064\056\065\062\066\076\001\002\000\046\004\uffc3\005" +
    "\uffc3\006\126\007\127\011\uffc3\012\uffc3\013\uffc3\015\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\033\123\061\uffc3\062\uffc3\001\002\000\040\004\uffc4" +
    "\005\uffc4\011\uffc4\012\uffc4\013\uffc4\015\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\061\uffc4" +
    "\062\uffc4\001\002\000\052\004\uffc1\005\uffc1\006\uffc1\007" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\015\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\033\uffc1\061\uffc1\062\uffc1\001\002\000\004\063\141" +
    "\001\002\000\060\004\uffbb\005\uffbb\006\uffbb\007\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\017\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\033\uffbb\034\uffbb\060\uffbb\061\uffbb\062\uffbb\001\002" +
    "\000\026\005\102\010\055\030\064\031\073\032\100\042" +
    "\101\063\071\064\056\065\062\066\076\001\002\000\004" +
    "\015\140\001\002\000\060\004\uffbd\005\uffbd\006\uffbd\007" +
    "\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\033\uffbd\034\uffbd\060\uffbd\061\uffbd\062\uffbd" +
    "\001\002\000\060\004\uffbc\005\uffbc\006\uffbc\007\uffbc\011" +
    "\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\017\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\033\uffbc\034\uffbc\060\uffbc\061\uffbc\062\uffbc\001\002" +
    "\000\026\005\102\010\055\030\064\031\073\032\100\042" +
    "\101\063\071\064\056\065\062\066\076\001\002\000\006" +
    "\011\uffce\061\uffce\001\002\000\004\011\145\001\002\000" +
    "\060\004\uffb9\005\uffb9\006\uffb9\007\uffb9\011\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\033\uffb9" +
    "\034\uffb9\060\uffb9\061\uffb9\062\uffb9\001\002\000\006\013" +
    "\uffdc\062\uffdc\001\002\000\006\013\uffd7\062\uffd7\001\002" +
    "\000\006\013\uffd4\062\uffd4\001\002\000\004\012\005\001" +
    "\002\000\010\013\uffdb\045\153\062\uffdb\001\002\000\004" +
    "\012\005\001\002\000\006\013\uffda\062\uffda\001\002\000" +
    "\014\002\uffff\013\uffff\016\uffff\045\uffff\062\uffff\001\002" +
    "\000\006\013\uffd5\062\uffd5\001\002\000\004\012\005\001" +
    "\002\000\006\013\uffd9\062\uffd9\001\002\000\026\012\005" +
    "\044\044\046\037\050\040\051\046\052\035\053\047\054" +
    "\045\056\051\057\050\001\002\000\006\013\uffde\062\uffde" +
    "\001\002\000\006\013\uffd8\062\uffd8\001\002\000\004\010" +
    "\166\001\002\000\004\012\005\001\002\000\022\011\ufff2" +
    "\034\017\036\023\037\024\040\021\041\016\047\010\063" +
    "\012\001\002\000\010\014\032\035\176\063\177\001\002" +
    "\000\004\011\175\001\002\000\006\011\ufff0\061\ufff0\001" +
    "\002\000\006\011\ufff3\061\173\001\002\000\020\034\017" +
    "\036\023\037\024\040\021\041\016\047\010\063\012\001" +
    "\002\000\006\011\ufff1\061\ufff1\001\002\000\004\012\ufff4" +
    "\001\002\000\004\063\200\001\002\000\006\011\uffee\061" +
    "\uffee\001\002\000\006\011\uffef\061\uffef\001\002\000\006" +
    "\016\ufff5\062\ufff5\001\002\000\010\014\uffeb\035\uffeb\063" +
    "\uffeb\001\002\000\006\014\032\063\204\001\002\000\006" +
    "\016\ufff6\062\ufff6\001\002\000\020\034\017\036\023\037" +
    "\024\040\021\041\016\047\010\063\012\001\002\000\006" +
    "\014\032\063\214\001\002\000\006\013\212\061\211\001" +
    "\002\000\006\013\uffe7\061\uffe7\001\002\000\020\034\017" +
    "\036\023\037\024\040\021\041\016\047\010\063\012\001" +
    "\002\000\010\014\uffe9\035\uffe9\063\uffe9\001\002\000\006" +
    "\013\uffe8\061\uffe8\001\002\000\006\013\uffe6\061\uffe6\001" +
    "\002\000\030\012\ufffe\013\ufffe\044\ufffe\046\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\054\ufffe\056\ufffe\057\ufffe\001" +
    "\002\000\024\034\017\036\023\037\024\040\021\041\016" +
    "\043\020\047\010\055\015\063\012\001\002\000\006\016" +
    "\ufffc\062\ufffc\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\024\004\024\005\006\006\013\007\021\010\010" +
    "\011\012\016\027\017\026\020\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\202\017\026\020\025\001\001\000\002\001\001" +
    "\000\006\017\201\020\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\040\023\041\024\035\025\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\031\162\032\073\033\071\034\067" +
    "\035\066\036\065\037\064\040\062\041\060\044\074\001" +
    "\001\000\002\001\001\000\026\031\156\032\073\033\071" +
    "\034\067\035\066\036\065\037\064\040\062\041\060\044" +
    "\074\001\001\000\026\031\155\032\073\033\071\034\067" +
    "\035\066\036\065\037\064\040\062\041\060\044\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\031\150\032\073\033\071\034\067\035\066\036" +
    "\065\037\064\040\062\041\060\044\074\001\001\000\002" +
    "\001\001\000\026\031\147\032\073\033\071\034\067\035" +
    "\066\036\065\037\064\040\062\041\060\044\074\001\001" +
    "\000\026\031\146\032\073\033\071\034\067\035\066\036" +
    "\065\037\064\040\062\041\060\044\074\001\001\000\026" +
    "\031\145\032\073\033\071\034\067\035\066\036\065\037" +
    "\064\040\062\041\060\044\074\001\001\000\002\001\001" +
    "\000\004\026\053\001\001\000\032\027\076\030\057\031" +
    "\056\032\073\033\071\034\067\035\066\036\065\037\064" +
    "\040\062\041\060\044\074\001\001\000\002\001\001\000" +
    "\024\032\143\033\071\034\067\035\066\036\065\037\064" +
    "\040\062\041\060\044\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\037\103\040\062" +
    "\041\060\044\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\034\115\035\066\036\065\037\064\040\062\041\060\044" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\032\114\033\071\034\067\035\066\036\065\037\064\040" +
    "\062\041\060\044\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\035\117\036\065\037\064\040\062\041" +
    "\060\044\074\001\001\000\002\001\001\000\016\035\121" +
    "\036\065\037\064\040\062\041\060\044\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\037\132\040\062" +
    "\041\060\044\074\001\001\000\016\035\131\036\065\037" +
    "\064\040\062\041\060\044\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\036\130\037\064\040\062\041" +
    "\060\044\074\001\001\000\004\043\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\031\136\032\073\033\071\034\067\035\066" +
    "\036\065\037\064\040\062\041\060\044\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\031\142\032\073\033\071\034\067\035\066\036\065\037" +
    "\064\040\062\041\060\044\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\151\001\001" +
    "\000\002\001\001\000\004\003\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\157" +
    "\001\001\000\002\001\001\000\006\003\040\025\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\164" +
    "\001\001\000\004\003\200\001\001\000\016\013\167\014" +
    "\171\015\170\016\166\017\026\020\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\173\016\166\017\026\020\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\205\017\026\020\025\021\206\022\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\205\017\026\020\025\022\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\216\007\021\010\010\011\012\016\027\017\026" +
    "\020\025\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    errores = new GestionErroresTiny();
    AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
    alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


    private GestionErroresTiny errores;
    public void syntax_error(Symbol unidadLexica) {errores.errorSintactico((UnidadLexica)unidadLexica);}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTTiny$actions {


  ClaseSemanticaTiny sem = new ClaseSemanticaTiny();

  private final ConstructorASTTiny parser;

  /** Constructor */
  CUP$ConstructorASTTiny$actions(ConstructorASTTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTTiny$do_action_part00000000(
    int                        CUP$ConstructorASTTiny$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTTiny$parser,
    java.util.Stack            CUP$ConstructorASTTiny$stack,
    int                        CUP$ConstructorASTTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTTiny$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              Prog RESULT =null;
		Bloq bloq = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.prog(bloq) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("programa",0, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTTiny$parser.done_parsing();
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= BABRIR declaraciones instrucciones BCERRAR 
            {
              Bloq RESULT =null;
		Decs deq = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Insts insts = (Insts)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.bloq(deq, insts) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("bloque",1, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= declaracionesAux FINDEC 
            {
              Decs RESULT =null;
		DecsAux decsAux = (DecsAux)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.si_decs(decsAux) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",2, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= 
            {
              Decs RESULT =null;
		 RESULT = sem.no_decs() ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",2, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracionesAux ::= declaracionesAux PUNTOCOMA declaracion 
            {
              DecsAux RESULT =null;
		DecsAux decsAux = (DecsAux)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		RESULT =  sem.muchas_decs(decsAux, dec) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracionesAux",3, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracionesAux ::= declaracion 
            {
              DecsAux RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		RESULT =  sem.una_dec(dec) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracionesAux",3, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= declaracionVar 
            {
              Dec RESULT =null;
		Dec decVar = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = decVar ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= declaracionTipo 
            {
              Dec RESULT =null;
		Dec decTipo = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = decTipo ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= declaracionProc 
            {
              Dec RESULT =null;
		Dec decProc = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = decProc ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionVar ::= tipo0 IDEN 
            {
              Dec RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_var(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracionVar",5, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracionTipo ::= TYPE tipo0 IDEN 
            {
              Dec RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_tipo(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracionTipo",6, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracionProc ::= PROC IDEN paramsFormales bloque 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		ParamsF paramsF = (ParamsF)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Bloq bloq = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_proc(id.str(), paramsF, bloq).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracionProc",7, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramsFormales ::= PABRIR paramsFormalesAux PCERRAR 
            {
              ParamsF RESULT =null;
		ParamsF paramsFAux = (ParamsF)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT  = paramsFAux; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsFormales",8, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramsFormalesAux ::= paramsFormalesLista 
            {
              ParamsF RESULT =null;
		ParamsFL paramsFL = (ParamsFL)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT  = sem.si_paramF(paramsFL); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsFormalesAux",9, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramsFormalesAux ::= 
            {
              ParamsF RESULT =null;
		 RESULT  = sem.no_paramF(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsFormalesAux",9, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // paramsFormalesLista ::= paramsFormalesLista COMA param 
            {
              ParamsFL RESULT =null;
		ParamsFL paramsFL = (ParamsFL)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT  = sem.muchos_paramsF(paramsFL, param); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsFormalesLista",10, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // paramsFormalesLista ::= param 
            {
              ParamsFL RESULT =null;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT  = sem.un_paramF(param); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsFormalesLista",10, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // param ::= tipo0 BITAND IDEN 
            {
              Param RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT  = (Param) sem.param_ref(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("param",11, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param ::= tipo0 IDEN 
            {
              Param RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT  = (Param) sem.param(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("param",11, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo0 ::= tipo0 TABRIR LITENT TCERRAR 
            {
              T RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		StringLocalizado ent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT  = (T) sem.tipo_array(tipo, ent.str()).ponFila(ent.fila()).ponCol(ent.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo0",12, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo0 ::= tipo1 
            {
              T RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = tipo ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo0",12, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo1 ::= PUNTERO tipo1 
            {
              T RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.tipo_punt(tipo) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo1",13, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo1 ::= tipo2 
            {
              T RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = tipo ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo1",13, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo2 ::= STRUCT BABRIR listaCampos BCERRAR 
            {
              T RESULT =null;
		LCampos lCampos = (LCampos)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.tipo_struct(lCampos) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listaCampos ::= listaCampos COMA campo 
            {
              LCampos RESULT =null;
		LCampos lCampos = (LCampos)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchos_campos(lCampos, campo) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("listaCampos",15, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listaCampos ::= campo 
            {
              LCampos RESULT =null;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.un_campo(campo) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("listaCampos",15, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // campo ::= tipo0 IDEN 
            {
              Campo RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Campo) sem.campo(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("campo",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo2 ::= ENTERO 
            {
              T RESULT =null;
		 RESULT = sem.ent() ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo2 ::= REAL 
            {
              T RESULT =null;
		 RESULT = sem.real() ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo2 ::= BOOL 
            {
              T RESULT =null;
		 RESULT = sem.bool() ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo2 ::= STRING 
            {
              T RESULT =null;
		 RESULT = sem.tipo_string() ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo2 ::= IDEN 
            {
              T RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (T) sem.tipo_iden(id.str()).ponFila(id.fila()).ponCol(id.col()) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instrucciones ::= instruccionesAux 
            {
              Insts RESULT =null;
		InstsAux instsAux = (InstsAux)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.si_instr(instsAux) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",17, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instrucciones ::= 
            {
              Insts RESULT =null;
		 RESULT = sem.no_instr() ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",17, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccionesAux ::= instruccionesAux PUNTOCOMA instruccion 
            {
              InstsAux RESULT =null;
		InstsAux instsAux = (InstsAux)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchas_instr(instsAux, inst) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccionesAux",18, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccionesAux ::= instruccion 
            {
              InstsAux RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.una_instr(inst) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccionesAux",18, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= EVAL expr 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.instr_expr(exp) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= IF expr bloque 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Bloq bloq = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.instr_if(exp, bloq) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= IF expr bloque ELSE bloque 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		Bloq bloq1 = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Bloq bloq2 = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.instr_if_else(exp, bloq1, bloq2) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= WHILE expr bloque 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Bloq bloq = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.instr_while(exp, bloq) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= READ expr 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.instr_read(exp) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= WRITE expr 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.instr_write(exp) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= NL 
            {
              Inst RESULT =null;
		 RESULT = sem.instr_nl() ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= NEW expr 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.instr_new(exp) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= DELETE expr 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.instr_del(exp) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= CALL IDEN paramsReales 
            {
              Inst RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		ParamsR paramsR = (ParamsR)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Inst) sem.instr_call(id.str(), paramsR).ponFila(id.fila()).ponCol(id.col()) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion ::= bloque 
            {
              Inst RESULT =null;
		Bloq bloq = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.instr_bloque(bloq) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // paramsReales ::= PABRIR paramsRealesAux PCERRAR 
            {
              ParamsR RESULT =null;
		ParamsR paramsRAux = (ParamsR)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = paramsRAux ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsReales",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // paramsRealesAux ::= paramsRealesLista 
            {
              ParamsR RESULT =null;
		ParamsRL paramsRL = (ParamsRL)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.si_paramsR(paramsRL) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsRealesAux",21, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // paramsRealesAux ::= 
            {
              ParamsR RESULT =null;
		 RESULT = sem.no_paramsR() ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsRealesAux",21, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // paramsRealesLista ::= paramsRealesLista COMA expr 
            {
              ParamsRL RESULT =null;
		ParamsRL paramsRL = (ParamsRL)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchos_paramsR(paramsRL, exp) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsRealesLista",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // paramsRealesLista ::= expr 
            {
              ParamsRL RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.un_paramsR(exp) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("paramsRealesLista",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= e0 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("expr",23, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // e0 ::= e1 ASIG e0 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.asig(exp1, exp2) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e0",24, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // e0 ::= e1 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e0",24, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // e1 ::= e1 op1 e2 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.mkop1(op1, exp1, exp2) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e1",25, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // e1 ::= e2 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e1",25, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // e2 ::= e2 SUMA e3 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.suma(exp1, exp2) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e2",26, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // e2 ::= e3 RESTA e3 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.resta(exp1, exp2) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e2",26, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // e2 ::= e3 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e2",26, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // e3 ::= e4 AND e3 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.and(exp1, exp2) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e3",27, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // e3 ::= e4 OR e4 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.or(exp1, exp2) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e3",27, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // e3 ::= e4 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e3",27, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // e4 ::= e4 op4 e5 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		String op4 = (String)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.mkop4(op4, exp1, exp2) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e4",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // e4 ::= e5 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e4",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // e5 ::= op5 e5 
            {
              Exp RESULT =null;
		String op5 = (String)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.mkop5(op5, exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e5",29, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // e5 ::= e6 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e5",29, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // e6 ::= e6 TABRIR expr TCERRAR 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.index(exp1, exp2) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e6",30, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // e6 ::= e6 PUNTO IDEN 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.acceso(exp, id.str()).ponFila(id.fila()).ponCol(id.col()) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e6",30, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // e6 ::= e6 PUNTERO 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.indireccion(exp) ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e6",30, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // e6 ::= e7 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e6",30, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // e7 ::= PABRIR e0 PCERRAR 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = exp ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e7",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // e7 ::= LITENT 
            {
              Exp RESULT =null;
		StringLocalizado ent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.lit_ent(ent.str()).ponFila(ent.fila()).ponCol(ent.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e7",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // e7 ::= LITREAL 
            {
              Exp RESULT =null;
		StringLocalizado real = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.lit_real(real.str()).ponFila(real.fila()).ponCol(real.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e7",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // e7 ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = sem.btrue(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e7",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // e7 ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = sem.bfalse(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e7",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // e7 ::= LITCADENA 
            {
              Exp RESULT =null;
		StringLocalizado litCadena = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.lit_cadena(litCadena.str()).ponFila(litCadena.fila()).ponCol(litCadena.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e7",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // e7 ::= IDEN 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp) sem.iden(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e7",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // e7 ::= NULL 
            {
              Exp RESULT =null;
		 RESULT = sem.vnull() ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("e7",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // op1 ::= MENOR 
            {
              String RESULT =null;
		 RESULT = "<" ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",32, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // op1 ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = ">" ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",32, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // op1 ::= MENORIGUAL 
            {
              String RESULT =null;
		 RESULT = "<=" ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",32, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // op1 ::= MAYORIGUAL 
            {
              String RESULT =null;
		 RESULT = ">=" ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",32, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // op1 ::= IGUAL 
            {
              String RESULT =null;
		 RESULT = "==" ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",32, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // op1 ::= NOIGUAL 
            {
              String RESULT =null;
		 RESULT = "!=" ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",32, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // op4 ::= MUL 
            {
              String RESULT =null;
		 RESULT = "*" ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op4",33, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // op4 ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/" ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op4",33, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // op4 ::= MOD 
            {
              String RESULT =null;
		 RESULT = "%" ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op4",33, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // op5 ::= RESTA 
            {
              String RESULT =null;
		 RESULT = "-" ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op5",34, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // op5 ::= NOT 
            {
              String RESULT =null;
		 RESULT = "not" ; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op5",34, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTTiny$do_action(
    int                        CUP$ConstructorASTTiny$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTTiny$parser,
    java.util.Stack            CUP$ConstructorASTTiny$stack,
    int                        CUP$ConstructorASTTiny$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTTiny$do_action_part00000000(
                               CUP$ConstructorASTTiny$act_num,
                               CUP$ConstructorASTTiny$parser,
                               CUP$ConstructorASTTiny$stack,
                               CUP$ConstructorASTTiny$top);
    }
}

