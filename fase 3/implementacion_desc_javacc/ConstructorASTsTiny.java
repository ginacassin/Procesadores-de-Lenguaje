/* Generated By:JavaCC: Do not edit this line. ConstructorASTsTiny.java */
package implementacion_desc_javacc;
import asint.ClaseSemanticaTiny;
import asint.SintaxisAbstractaTiny.Exp;
import asint.SintaxisAbstractaTiny.ParamsR;
import asint.SintaxisAbstractaTiny.ParamsRL;
import asint.SintaxisAbstractaTiny.Insts;
import asint.SintaxisAbstractaTiny.InstsAux;
import asint.SintaxisAbstractaTiny.Inst;
import asint.SintaxisAbstractaTiny.Campo;
import asint.SintaxisAbstractaTiny.LCampos;
import asint.SintaxisAbstractaTiny.T;
import asint.SintaxisAbstractaTiny.ParamsF;
import asint.SintaxisAbstractaTiny.Param;
import asint.SintaxisAbstractaTiny.ParamsFL;
import asint.SintaxisAbstractaTiny.Dec;
import asint.SintaxisAbstractaTiny.Decs;
import asint.SintaxisAbstractaTiny.DecsAux;
import asint.SintaxisAbstractaTiny.Bloq;
import asint.SintaxisAbstractaTiny.Prog;
import c_ast_ascendente.UnidadLexica.StringLocalizado;

public class ConstructorASTsTiny implements ConstructorASTsTinyConstants {
    protected void newToken(Token t) {}
    private ClaseSemanticaTiny sem = new ClaseSemanticaTiny();

// ======== REGLAS SINTACTICAS ========
  final public Prog analiza() throws ParseException {
    trace_call("analiza");
    try {
           Prog prog;
      prog = programa();
      jj_consume_token(0);
                 {if (true) return prog;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("analiza");
    }
  }

  final public Prog programa() throws ParseException {
    trace_call("programa");
    try {
           Bloq bloq;
      bloq = bloque();
                 {if (true) return sem.prog(bloq);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("programa");
    }
  }

  final public Bloq bloque() throws ParseException {
    trace_call("bloque");
    try {
           Decs decs; Insts insts;
      jj_consume_token(34);
      decs = declaraciones();
      insts = instrucciones();
      jj_consume_token(35);
                 {if (true) return sem.bloq(decs, insts);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("bloque");
    }
  }

  final public Decs declaraciones() throws ParseException {
    trace_call("declaraciones");
    try {
           DecsAux decsAux;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case proc:
      case type:
      case iden:
      case 42:
      case 44:
        decsAux = declaracionesAux();
        jj_consume_token(36);
                 {if (true) return sem.si_decs(decsAux);}
        break;
      default:
        jj_la1[0] = jj_gen;
                 {if (true) return sem.no_decs();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaraciones");
    }
  }

  final public DecsAux declaracionesAux() throws ParseException {
    trace_call("declaracionesAux");
    try {
           DecsAux decsAux; Dec dec;
      dec = declaracion();
      decsAux = recDeclaracion(sem.una_dec(dec));
                 {if (true) return decsAux;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaracionesAux");
    }
  }

  final public DecsAux recDeclaracion(DecsAux decsAuxh) throws ParseException {
    trace_call("recDeclaracion");
    try {
           DecsAux decsAux; Dec dec;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 37:
        jj_consume_token(37);
        dec = declaracion();
        decsAux = recDeclaracion(sem.muchas_decs(decsAuxh, dec));
                 {if (true) return decsAux;}
        break;
      default:
        jj_la1[1] = jj_gen;
                 {if (true) return decsAuxh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recDeclaracion");
    }
  }

  final public Dec declaracion() throws ParseException {
    trace_call("declaracion");
    try {
           T tipo; Token id; ParamsF paramsF; Bloq bloq;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case iden:
      case 42:
      case 44:
        tipo = tipo0();
        id = jj_consume_token(iden);
                 {if (true) return (Dec)sem.dec_var(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
      case type:
        jj_consume_token(type);
        tipo = tipo0();
        id = jj_consume_token(iden);
                 {if (true) return (Dec)sem.dec_tipo(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
      case proc:
        jj_consume_token(proc);
        id = jj_consume_token(iden);
        paramsF = paramsFormales();
        bloq = bloque();
                 {if (true) return (Dec)sem.dec_proc(id.image, paramsF, bloq).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaracion");
    }
  }

  final public ParamsF paramsFormales() throws ParseException {
    trace_call("paramsFormales");
    try {
           ParamsFL paramsFL;
      jj_consume_token(38);
      paramsFL = paramsFormalesAux();
      jj_consume_token(39);
                 {if (true) return paramsFL;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("paramsFormales");
    }
  }

  final public ParamsF paramsFormalesAux() throws ParseException {
    trace_call("paramsFormalesAux");
    try {
           ParamsFL paramsFL;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case iden:
      case 41:
      case 42:
      case 44:
        paramsFL = paramsFormalesLista();
                 {if (true) return sem.si_paramF(paramsFL);}
        break;
      default:
        jj_la1[3] = jj_gen;
                 {if (true) return sem.no_paramF();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("paramsFormalesAux");
    }
  }

  final public ParamsFL paramsFormalesLista() throws ParseException {
    trace_call("paramsFormalesLista");
    try {
           ParamsFL paramsFL; Param param;
      param = param();
      paramsFL = recParamFormal(sem.un_paramF(param));
                 {if (true) return sem.si_paramF(paramsFL);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("paramsFormalesLista");
    }
  }

  final public ParamsFL recParamFormal(ParamsFL paramsFLh) throws ParseException {
    trace_call("recParamFormal");
    try {
           ParamsFL paramsFL; Param param;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        jj_consume_token(40);
        param = param();
        paramsFL = recParamFormal(sem.muchos_paramsR(paramsFLh, param));
                 {if (true) return paramsFL;}
        break;
      default:
        jj_la1[4] = jj_gen;
                 {if (true) return paramsFLh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recParamFormal");
    }
  }

  final public Param param() throws ParseException {
    trace_call("param");
    try {
           T tipo0; Token id;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
      case 42:
      case 44:
        tipo0 = tipo0();
        jj_consume_token(41);
        id = jj_consume_token(iden);
                 {if (true) return sem.param_ref(tipo0, id.image);}
        break;
      case iden:
        tipo0 = tipo0();
        id = jj_consume_token(iden);
                 {if (true) return sem.param(tipo0, id.image);}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("param");
    }
  }

  final public T tipo0() throws ParseException {
    trace_call("tipo0");
    try {
           T tipo; T recArray;
      tipo = tipo1();
      recArray = recArray(tipo);
                 {if (true) return recArray;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo0");
    }
  }

  final public T recArray(T tipoh) throws ParseException {
    trace_call("recArray");
    try {
           Token litEntero; T recArray;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        litEntero = jj_consume_token(iden);
        jj_consume_token(43);
        recArray = recArray((T)sem.tipo_array(tipoh, litEntero.image).ponFila(litEntero.beginLine).ponCol(litEntero.beginColumn));
                 {if (true) return recArray;}
        break;
      default:
        jj_la1[6] = jj_gen;
                 {if (true) return tipoh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recArray");
    }
  }

  final public T tipo1() throws ParseException {
    trace_call("tipo1");
    try {
           T tipo;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        jj_consume_token(44);
        tipo = tipo1();
                 {if (true) return sem.tipo_punt(tipo);}
        break;
      default:
        jj_la1[7] = jj_gen;
                 {if (true) return tipo2();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo1");
    }
  }

  final public T tipo2() throws ParseException {
    trace_call("tipo2");
    try {
           LCampos lCampos; Token id;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case struct:
        jj_consume_token(struct);
        jj_consume_token(34);
        lCampos = listaCampos();
        jj_consume_token(35);
                 {if (true) return sem.tipo_struct(lCampos);}
        break;
      case INT:
        jj_consume_token(INT);
                 {if (true) return sem.ent();}
        break;
      case real:
        jj_consume_token(real);
                 {if (true) return sem.real();}
        break;
      case bool:
        jj_consume_token(bool);
                 {if (true) return sem.bool();}
        break;
      case string:
        jj_consume_token(string);
                 {if (true) return sem.tipo_string();}
        id = jj_consume_token(iden);
                 {if (true) return (T)sem.tipo_iden(id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo2");
    }
  }

  final public LCampos listaCampos() throws ParseException {
    trace_call("listaCampos");
    try {
           LCampos lCampos; Campo campo;
      campo = campo();
      lCampos = recCampo(sem.un_campo(campo));
                 {if (true) return lCampos;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("listaCampos");
    }
  }

  final public LCampos recCampo(Campo campoh) throws ParseException {
    trace_call("recCampo");
    try {
           LCampos lCampos; Campo campo;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        jj_consume_token(40);
        campo = campo();
        lCampos = recCampo(sem.muchos_campos(campoh, campo));
                 {if (true) return lCampos;}
        break;
      default:
        jj_la1[9] = jj_gen;
                 {if (true) return campoh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recCampo");
    }
  }

  final public Campo campo() throws ParseException {
    trace_call("campo");
    try {
           T tipo; Token id;
      tipo = tipo0();
      id = jj_consume_token(iden);
                 {if (true) return (Campo)sem.campo(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("campo");
    }
  }

  final public Insts instrucciones() throws ParseException {
    trace_call("instrucciones");
    try {
           InstsAux instsAux;
      instsAux = instruccionesAux();
                 {if (true) return sem.si_instr(instsAux);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instrucciones");
    }
  }

  final public InstsAux instruccionesAux() throws ParseException {
    trace_call("instruccionesAux");
    try {
           InstsAux instsAux; Inst inst;
      inst = instruccion();
      instsAux = recInstruccion(sem.una_instr(inst));
                 {if (true) return instsAux;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccionesAux");
    }
  }

  final public InstsAux recInstruccion(InstsAux instsAuxh) throws ParseException {
    trace_call("recInstruccion");
    try {
           InstsAux instsAux; Inst inst;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 37:
        jj_consume_token(37);
        inst = instruccion();
        instsAux = recInstruccion(sem.muchas_instr(instsAuxh, inst));
                 {if (true) return instsAux;}
        break;
      default:
        jj_la1[10] = jj_gen;
                 {if (true) return instsAuxh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recInstruccion");
    }
  }

  final public Inst instruccion() throws ParseException {
    trace_call("instruccion");
    try {
           Exp exp; Bloq bloq1, bloq2; Token id; ParamsR paramsR;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        jj_consume_token(45);
        exp = expr();
                 {if (true) return sem.instr_expr(exp);}
        break;
      case IF:
        jj_consume_token(IF);
        exp = expr();
        bloq1 = bloque();
        bloq2 = factIf(exp, bloq1);
                 {if (true) return bloq2;}
        break;
      case WHILE:
        jj_consume_token(WHILE);
        exp = expr();
        bloq1 = bloque();
                  {if (true) return sem.instr_while(exp, bloq1);}
        break;
      case read:
        jj_consume_token(read);
        exp = expr();
                 {if (true) return sem.instr_read(exp);}
        break;
      case write:
        jj_consume_token(write);
        exp = expr();
                 {if (true) return sem.instr_write(exp);}
        break;
      default:
        jj_la1[11] = jj_gen;
                 {if (true) return sem.instr_nl();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion");
    }
  }

  final public Inst factIf(Exp exph, Bloq bloqh) throws ParseException {
    trace_call("factIf");
    try {
           Bloq bloq;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        bloq = bloque();
                 {if (true) return sem.instr_if_else(exph, bloqh, bloq);}
        break;
      default:
        jj_la1[12] = jj_gen;
                 {if (true) return sem.instr_if(exph, bloqh);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("factIf");
    }
  }

  final public ParamsR paramsReales() throws ParseException {
    trace_call("paramsReales");
    try {
           ParamsRL paramsRL;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        jj_consume_token(38);
        paramsRL = paramsRealesLista();
        jj_consume_token(39);
                 {if (true) return sem.si_paramsR(paramsRL);}
        break;
      default:
        jj_la1[13] = jj_gen;
                 {if (true) return sem.no_paramsR();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("paramsReales");
    }
  }

  final public ParamsRL paramsRealesLista() throws ParseException {
    trace_call("paramsRealesLista");
    try {
           ParamsRL paramsRL; Exp exp;
      exp = expr();
      paramsRL = recParamReal(sem.un_paramsR(exp));
                 {if (true) return paramsRL;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("paramsRealesLista");
    }
  }

  final public ParamsRL recParamReal(ParamsRL paramsRLh) throws ParseException {
    trace_call("recParamReal");
    try {
           ParamsRL paramsRL; Exp exp;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        jj_consume_token(40);
        exp = expr();
        paramsRL = recParamReal(sem.muchos_paramsR(paramsRLh, exp));
                 {if (true) return paramsRL;}
        break;
      default:
        jj_la1[14] = jj_gen;
                 {if (true) return paramsRLh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recParamReal");
    }
  }

  final public Exp expr() throws ParseException {
    trace_call("expr");
    try {
           Exp eo;
      e0 = e0();
                 {if (true) return e0;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr");
    }
  }

  final public Exp e0() throws ParseException {
    trace_call("e0");
    try {
           Exp e1; Exp e0;
      e1 = e1();
      e0 = facE1(e1);
                 {if (true) return e0;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("e0");
    }
  }

  final public Exp facE1(Exp e1h) throws ParseException {
    trace_call("facE1");
    try {
           Exp e1; Exp e0;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
        jj_consume_token(46);
        e1 = e0();
        e0 = facE1(sem.asig(e1h, e1));
                 {if (true) return e0;}
        break;
      default:
        jj_la1[15] = jj_gen;
                 {if (true) return e1h;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("facE1");
    }
  }

  final public Exp e1() throws ParseException {
    trace_call("e1");
    try {
           Exp e2,e1;
      e2 = e2();
      e1 = recOp1(e2);
                 {if (true) return e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("e1");
    }
  }

  final public Exp recOp1(Exp e2h) throws ParseException {
    trace_call("recOp1");
    try {
           String op1; Exp e2,e1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
        op1 = op1();
        e2 = e2();
        e1 = recOp1(sem.mkop1(op1, e2h, e2));
                 {if (true) return e1;}
        break;
      default:
        jj_la1[16] = jj_gen;
                 {if (true) return e2h;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recOp1");
    }
  }

  final public Exp e2() throws ParseException {
    trace_call("e2");
    try {
           Exp e31, e32;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case not:
      case TRUE:
      case FALSE:
      case NULL:
      case iden:
      case 38:
      case 47:
        e32 = e3();
        e32 = facE3(e31);
        recSuma(e3);
                 {if (true) return e0;}
        break;
      default:
        jj_la1[17] = jj_gen;
                 {if (true) return e2h;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("e2");
    }
  }

  final public Exp recSuma(Exp e3h) throws ParseException {
    trace_call("recSuma");
    try {
           Exp e31, e32;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case not:
      case TRUE:
      case FALSE:
      case NULL:
      case iden:
      case 38:
      case 47:
        e31 = e3();
        e32 = recSuma(sem.suma(e3h, e31));
                 {if (true) return e32;}
        break;
      default:
        jj_la1[18] = jj_gen;
                 {if (true) return e3h;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recSuma");
    }
  }

  final public Exp facE3(Exp e31h) throws ParseException {
    trace_call("facE3");
    try {
           Exp e3;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
        jj_consume_token(47);
        e3 = e3();
                 {if (true) return sem.resta(e31h, e3);}
        break;
      default:
        jj_la1[19] = jj_gen;
                 {if (true) return e31h;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("facE3");
    }
  }

  final public Exp e3() throws ParseException {
    trace_call("e3");
    try {
           Exp e4, e;
      e4 = e4();
      e = facE4(e4);
                 {if (true) return e;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("e3");
    }
  }

  final public Exp facE4(Exp e4h) throws ParseException {
    trace_call("facE4");
    try {
           Exp e;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case and:
        jj_consume_token(and);
        e = e3();
                 {if (true) return sem.and(e4h, e);}
        break;
      case or:
        jj_consume_token(or);
        e = e4();
                 {if (true) return sem.or(e4h, e);}
        break;
      default:
        jj_la1[20] = jj_gen;
                 {if (true) return e4h;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("facE4");
    }
  }

  final public Exp e4() throws ParseException {
    trace_call("e4");
    try {
           Exp e51, e52;
      e51 = e5();
      e52 = recOp4(e51);
                 {if (true) return e52;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("e4");
    }
  }

  final public Exp recOp4(Exp e5h) throws ParseException {
    trace_call("recOp4");
    try {
           String op; Exp e51, e52;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 55:
      case 56:
      case 57:
        op = op4();
        e51 = e5();
        e52 = recOp4(sem.mkop4(op, e5h, e51));
                 {if (true) return e52;}
        break;
      default:
        jj_la1[21] = jj_gen;
                 {if (true) return e5h;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recOp4");
    }
  }

  final public Exp e5() throws ParseException {
    trace_call("e5");
    try {
           String op; Exp e;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case not:
      case 47:
        op = op5();
        e = e5();
                 {if (true) return sem.mkop5(op, e);}
        break;
      case TRUE:
      case FALSE:
      case NULL:
      case iden:
      case 38:
        e = e6();
                 {if (true) return e;}
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("e5");
    }
  }

  final public Exp e6() throws ParseException {
    trace_call("e6");
    try {
           Exp e7, e;
      e7 = e7();
      e = recOp6(e7);
                 {if (true) return e;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("e6");
    }
  }

  final public Exp recOp6(Exp e7h) throws ParseException {
    trace_call("recOp6");
    try {
           Exp expr, e; Token id;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        expr = expr();
        jj_consume_token(43);
        e = recOp6(sem.index(e7h, expr));
                 {if (true) return e;}
        break;
      case 48:
        jj_consume_token(48);
        id = jj_consume_token(iden);
        e = recOp6((Exp)sem.acceso(e7h, id.image).ponFila(id.beginLine).ponCol(id.beginColumn));
                 {if (true) return e;}
        break;
      case 44:
        jj_consume_token(44);
        e = recOp6(sem.indireccion(e7h));
                 {if (true) return e;}
        break;
      default:
        jj_la1[23] = jj_gen;
                 {if (true) return e7h;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recOp6");
    }
  }

  final public Exp e7() throws ParseException {
    trace_call("e7");
    try {
           Exp e0; Token id;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        jj_consume_token(38);
        e0 = e0();
        jj_consume_token(39);
                 {if (true) return e0;}
        break;
      case iden:
        id = jj_consume_token(iden);
                 {if (true) return (Exp)sem.lit_ent(id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
        id = jj_consume_token(iden);
                 {if (true) return (Exp)sem.lit_real(id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
      case TRUE:
        jj_consume_token(TRUE);
                 {if (true) return sem.btrue();}
        break;
      case FALSE:
        jj_consume_token(FALSE);
                 {if (true) return sem.bfalse();}
        break;
        id = jj_consume_token(iden);
                 {if (true) return (Exp)sem.lit_cadena(id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
        id = jj_consume_token(iden);
                 {if (true) return (Exp)sem.iden(id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
      case NULL:
        jj_consume_token(NULL);
                 {if (true) return sem.vnull();}
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("e7");
    }
  }

  final public String op1() throws ParseException {
    trace_call("op1");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
        jj_consume_token(49);
             {if (true) return "<";}
        break;
      case 50:
        jj_consume_token(50);
             {if (true) return ">";}
        break;
      case 51:
        jj_consume_token(51);
             {if (true) return "<=";}
        break;
      case 52:
        jj_consume_token(52);
             {if (true) return ">=";}
        break;
      case 53:
        jj_consume_token(53);
             {if (true) return "==";}
        break;
      case 54:
        jj_consume_token(54);
             {if (true) return "!=";}
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("op1");
    }
  }

  final public String op4() throws ParseException {
    trace_call("op4");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 55:
        jj_consume_token(55);
             {if (true) return "*";}
        break;
      case 56:
        jj_consume_token(56);
             {if (true) return "/";}
        break;
      case 57:
        jj_consume_token(57);
             {if (true) return "%";}
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("op4");
    }
  }

  final public String op5() throws ParseException {
    trace_call("op5");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
        jj_consume_token(47);
             {if (true) return "-";}
        break;
      case not:
        jj_consume_token(not);
             {if (true) return "not";}
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("op5");
    }
  }

  /** Generated Token Manager. */
  public ConstructorASTsTinyTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x50040000,0x0,0x50040000,0x40000000,0x0,0x40000000,0x0,0x0,0x41e000,0x0,0x0,0x6280000,0x100000,0x0,0x0,0x0,0x0,0x40021c00,0x40021c00,0x0,0x300,0x0,0x40021c00,0x0,0x40021800,0x0,0x0,0x400,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1400,0x20,0x1400,0x1600,0x100,0x1600,0x400,0x1000,0x0,0x100,0x20,0x2000,0x0,0x40,0x100,0x4000,0x7e0000,0x8040,0x8040,0x8000,0x0,0x3800000,0x8040,0x11400,0x40,0x7e0000,0x3800000,0x8000,};
   }

  /** Constructor with InputStream. */
  public ConstructorASTsTiny(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ConstructorASTsTiny(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ConstructorASTsTinyTokenManager(this, jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ConstructorASTsTiny(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ConstructorASTsTinyTokenManager(this, jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ConstructorASTsTiny(ConstructorASTsTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ConstructorASTsTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[58];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 58; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
