options  {
  STATIC=false;
  DEBUG_PARSER=true;
  TOKEN_MANAGER_USES_PARSER=true;
}
PARSER_BEGIN(ConstructorASTsTiny)
package implementacion_desc_javacc;
import asint.ClaseSemanticaEval;
import asint.SintaxisAbstractaTiny.Exp;
import asint.SintaxisAbstractaTiny.ParamsR;
import asint.SintaxisAbstractaTiny.ParamsRL;
import asint.SintaxisAbstractaTiny.Insts;
import asint.SintaxisAbstractaTiny.InstsAux;
import asint.SintaxisAbstractaTiny.Inst;
import asint.SintaxisAbstractaTiny.Campo;
import asint.SintaxisAbstractaTiny.LCampos;
import asint.SintaxisAbstractaTiny.T;
import asint.SintaxisAbstractaTiny.ParamsF;
import asint.SintaxisAbstractaTiny.Param;
import asint.SintaxisAbstractaTiny.ParamsFL;
import asint.SintaxisAbstractaTiny.Dec;
import asint.SintaxisAbstractaTiny.Decs;
import asint.SintaxisAbstractaTiny.DecsAux;
import asint.SintaxisAbstractaTiny.Bloq;
import asint.SintaxisAbstractaTiny.Prog;
//import de StringLocalizado ???


public class ConstructorASTsTiny {
    //protected void newToken(Token t) {}
    private ClaseSemanticaTiny sem = new ClaseSemanticaTiny();
}
PARSER_END(ConstructorASTsTiny)

// ======== REGLAS LEXICAS ========

  // Reglas auxiliares
  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digitoSinCero:["1"-"9"]>}
  TOKEN:{<#digito:<digitoSinCero>|"0">}
  TOKEN:{<#parteEntera:<digitoSinCero> (<digito>)* |"0">}
  TOKEN:{<#parteDecimal: (<digito>)* <digitoSinCero> | "0">}

  // Reglas de cadenas ignorables
  SKIP:{<["\t"," ","\r","\b","\n"]>}
  SKIP:{<"##"(~["\n"])*>}

  // Reglas de token
  TOKEN: {<and:("a"|"A")("n"|"N")("d"|"D")>}
  TOKEN: {<or:("o"|"O")("r"|"R")>}
  TOKEN: {<not:("n"|"N")("o"|"O")("t"|"T")>}
  TOKEN: {<TRUE:("t"|"T")("r"|"R")("u"|"U")("e"|"E")>}
  TOKEN: {<FALSE:("f"|"F")("a"|"A")("l"|"L")("s"|"S")("e"|"E")>}
  TOKEN: {<INT:("i"|"I")("n"|"N")("t"|"T")>}
  TOKEN: {<real:("r"|"R")("e"|"E")("a"|"A")("l"|"L")>}
  TOKEN: {<bool:("b"|"B")("o"|"O")("o"|"O")("l"|"L")>}
  TOKEN: {<string:("s"|"S")("t"|"T")("r"|"R")("i"|"I")("n"|"N")("g"|"G")>}
  TOKEN: {<NULL:("n"|"N")("u"|"U")("l"|"L")("l"|"L")>}
  TOKEN: {<proc:("p"|"P")("r"|"R")("o"|"O")("c"|"C")>}
  TOKEN: {<IF:("i"|"I")("f"|"F")>}
  TOKEN: {<ELSE:("e"|"E")("l"|"L")("s"|"S")("e"|"E")>}
  TOKEN: {<WHILE:("w"|"W")("h"|"H")("i"|"I")("l"|"L")("e"|"E")>}
  TOKEN: {<struct:("s"|"S")("t"|"T")("r"|"R")("u"|"U")("c"|"C")("t"|"T")>}
  TOKEN: {<NEW:("n"|"N")("e"|"E")("w"|"W")>}
  TOKEN: {<delete:("d"|"D")("e"|"E")("l"|"L")("e"|"E")("t"|"T")("e"|"E")>}
  TOKEN: {<read:("r"|"R")("e"|"E")("a"|"A")("d"|"D")>}
  TOKEN: {<write:("w"|"W")("r"|"R")("i"|"I")("t"|"T")("e"|"E")>}
  TOKEN: {<nl:("n"|"N")("l"|"L")>}
  TOKEN: {<type:("t"|"T")("y"|"Y")("p"|"P")("e"|"E")>}
  TOKEN: {<call:("c"|"C")("a"|"A")("l"|"L")("l"|"L")>}
  TOKEN:{<iden:(<letra>|"_")(<letra>|<digito>|"_")*>}
  TOKEN:{<literalEntero:(["+","-"])?<parteEntera>>}
  TOKEN:{<literalReal:<literalEntero>(("."<parteDecimal>)|(("e"|"E")(["+","-"])?<parteEntera>)|("."<parteDecimal>("e"|"E")(["+","-"])?<parteEntera>)) >}
  TOKEN:{<literalCadena:"\""(~["\""])*"\"">}

// ======== REGLAS SINTACTICAS ========

  void programa()   : {} {bloque() <EOF>}
  void bloque()   : {} {"{" declaraciones() instrucciones() "}"}

  void declaraciones()   : {} {declaracionesAux() "&&" | {}}
  void declaracionesAux()   : {} {declaracion() recDeclaracion()}
  void recDeclaracion()   : {} {";" declaracion() recDeclaracion() | {}}
  void declaracion()   : {} {declaracionVar() | declaracionTipo() | declaracionProc()}
  void declaracionVar()   : {} {tipo0() <iden>}
  void declaracionTipo()   : {} {<type> tipo0() <iden>}
  void declaracionProc()   : {} {<proc> <iden> paramsFormales() bloque()}
  void paramsFormales()   : {} {"(" paramsFormalesAux() ")"}
  void paramsFormalesAux()   : {} {paramsFormalesLista() | {}}
  void paramsFormalesLista()   : {} {param() recParamFormal()}
  void recParamFormal()   : {} {"," param() recParamFormal() | {}}
  void param()   : {} {tipo0() referencia() <iden>}
  void referencia()   : {} {"&" | {}}

  void tipo0()   : {} {tipo1() recArray()}
  void recArray()   : {} {"[" <literalEntero> "]" recArray() | {}}
  void tipo1()   : {} {"^" tipo1() | tipo2()}
  void tipo2()   : {} {<struct> "{" listaCampos() "}" | <INT> | <real> | <bool> | <string> | <iden>}
  void listaCampos()   : {} {campo() recCampo()}
  void recCampo()   : {} {"," campo() recCampo() | {}}
  void campo()   : {} {tipo0() <iden>}

  void instrucciones()   : {} {instruccionesAux() | {}}
  void instruccionesAux()   : {} {instruccion() recInstruccion()}
  void recInstruccion()   : {} {";" instruccion() recInstruccion() | {}}
  void instruccion()   : {} {"@" expr() | <IF> expr() bloque() factIf() | <WHILE> expr() bloque() | <read> expr() | <write> expr() | <nl> | <NEW> expr() | <delete> expr() | <call> <iden> paramsReales() | bloque()}
  void factIf()   : {} {<ELSE> bloque() | {}}
  void paramsReales()   : {} {"(" paramsRealesAux() ")"}
  void paramsRealesAux()   : {} {paramsRealesLista() | {}}
  void paramsRealesLista()   : {} {expr() recParamReal()}
  void recParamReal()   : {} {"," expr() recParamReal() | {}}

  void expr()   : {} {e0()}
  void e0()   : {} {e1() facE1()}
  void facE1()   : {} {"=" e0() facE1() | {}}
  void e1()   : {} {e2() recOp1()}
  void recOp1()   : {} {op1() e2() recOp1() | {}}
  void e2()   : {} {e3() facE3() recSuma()}
  void recSuma()   : {} {"+" e3() recSuma() | {}}
  void facE3()   : {} {"-" e3() | {}}
  void e3()   : {} {e4() facE4()}
  void facE4()   : {} {<and> e3() | <or> e4() | {}}
  void e4()   : {} {e5() recOp4()}
  void recOp4()   : {} {op4() e5() recOp4() | {}}
  void e5()   : {} {op5() e5() | e6()}
  void e6()   : {} {e6Aux() recOp6()}
  void recOp6()   : {} {op6() recOp6() | {}}
  void e6Aux()   : {} {"(" e0() ")" | <literalEntero> | <literalReal> | <TRUE> | <FALSE> | <literalCadena> | <iden> | <NULL>}
  void op1()   : {} {"<" | ">" | "<=" | ">=" | "==" | "!="}
  void op4()   : {} {"*" | "/" | "%"}
  void op5()   : {} {"-" | <not>}
  void op6()   : {} {"[" expr() "]" | "." <iden> | "^"}














