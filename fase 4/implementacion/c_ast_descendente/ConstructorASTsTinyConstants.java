/* Generated By:JavaCC: Do not edit this line. ConstructorASTsTinyConstants.java */
package c_ast_descendente;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ConstructorASTsTinyConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int letra = 1;
  /** RegularExpression Id. */
  int digitoSinCero = 2;
  /** RegularExpression Id. */
  int digito = 3;
  /** RegularExpression Id. */
  int parteEntera = 4;
  /** RegularExpression Id. */
  int parteDecimal = 5;
  /** RegularExpression Id. */
  int and = 8;
  /** RegularExpression Id. */
  int or = 9;
  /** RegularExpression Id. */
  int not = 10;
  /** RegularExpression Id. */
  int TRUE = 11;
  /** RegularExpression Id. */
  int FALSE = 12;
  /** RegularExpression Id. */
  int INT = 13;
  /** RegularExpression Id. */
  int real = 14;
  /** RegularExpression Id. */
  int bool = 15;
  /** RegularExpression Id. */
  int string = 16;
  /** RegularExpression Id. */
  int NULL = 17;
  /** RegularExpression Id. */
  int proc = 18;
  /** RegularExpression Id. */
  int IF = 19;
  /** RegularExpression Id. */
  int ELSE = 20;
  /** RegularExpression Id. */
  int WHILE = 21;
  /** RegularExpression Id. */
  int struct = 22;
  /** RegularExpression Id. */
  int NEW = 23;
  /** RegularExpression Id. */
  int delete = 24;
  /** RegularExpression Id. */
  int read = 25;
  /** RegularExpression Id. */
  int write = 26;
  /** RegularExpression Id. */
  int nl = 27;
  /** RegularExpression Id. */
  int type = 28;
  /** RegularExpression Id. */
  int call = 29;
  /** RegularExpression Id. */
  int iden = 30;
  /** RegularExpression Id. */
  int literalEntero = 31;
  /** RegularExpression Id. */
  int literalReal = 32;
  /** RegularExpression Id. */
  int literalCadena = 33;
  /** RegularExpression Id. */
  int suma = 34;
  /** RegularExpression Id. */
  int resta = 35;
  /** RegularExpression Id. */
  int mod = 36;
  /** RegularExpression Id. */
  int mul = 37;
  /** RegularExpression Id. */
  int div = 38;
  /** RegularExpression Id. */
  int asignar = 39;
  /** RegularExpression Id. */
  int menor = 40;
  /** RegularExpression Id. */
  int mayor = 41;
  /** RegularExpression Id. */
  int menorIgual = 42;
  /** RegularExpression Id. */
  int mayorIgual = 43;
  /** RegularExpression Id. */
  int igual = 44;
  /** RegularExpression Id. */
  int noIgual = 45;
  /** RegularExpression Id. */
  int abrirCorchete = 46;
  /** RegularExpression Id. */
  int indir = 47;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<letra>",
    "<digitoSinCero>",
    "<digito>",
    "<parteEntera>",
    "<parteDecimal>",
    "<token of kind 6>",
    "<token of kind 7>",
    "<and>",
    "<or>",
    "<not>",
    "<TRUE>",
    "<FALSE>",
    "<INT>",
    "<real>",
    "<bool>",
    "<string>",
    "<NULL>",
    "<proc>",
    "<IF>",
    "<ELSE>",
    "<WHILE>",
    "<struct>",
    "<NEW>",
    "<delete>",
    "<read>",
    "<write>",
    "<nl>",
    "<type>",
    "<call>",
    "<iden>",
    "<literalEntero>",
    "<literalReal>",
    "<literalCadena>",
    "\"+\"",
    "\"-\"",
    "\"%\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"[\"",
    "\"^\"",
    "\"$$\"",
    "\"{\"",
    "\"}\"",
    "\"&&\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"&\"",
    "\"]\"",
    "\"@\"",
    "\".\"",
  };

}
